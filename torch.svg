<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="390.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="373" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="373" > </text>
<g id="frames">
<g >
<title>bufio.(*Writer).Flush (112 samples, 11.36%)</title><rect x="175.2" y="293" width="134.0" height="15.0" fill="rgb(223,137,31)" rx="2" ry="2" />
<text  x="178.15" y="303.5" >bufio.(*Writer)...</text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.10%)</title><rect x="156.0" y="197" width="1.2" height="15.0" fill="rgb(238,218,44)" rx="2" ry="2" />
<text  x="159.00" y="207.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (110 samples, 11.16%)</title><rect x="177.5" y="245" width="131.7" height="15.0" fill="rgb(242,30,33)" rx="2" ry="2" />
<text  x="180.55" y="255.5" >net.(*netFD).Write</text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.10%)</title><rect x="156.0" y="229" width="1.2" height="15.0" fill="rgb(205,154,18)" rx="2" ry="2" />
<text  x="159.00" y="239.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (3 samples, 0.30%)</title><rect x="1158.9" y="277" width="3.6" height="15.0" fill="rgb(239,68,31)" rx="2" ry="2" />
<text  x="1161.88" y="287.5" ></text>
</g>
<g >
<title>runtime.semasleep (86 samples, 8.72%)</title><rect x="747.2" y="229" width="102.9" height="15.0" fill="rgb(240,49,10)" rx="2" ry="2" />
<text  x="750.20" y="239.5" >runtime.sema..</text>
</g>
<g >
<title>fmt.(*pp).handleMethods (4 samples, 0.41%)</title><rect x="314.0" y="181" width="4.8" height="15.0" fill="rgb(214,103,38)" rx="2" ry="2" />
<text  x="316.98" y="191.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Int64).Load (2 samples, 0.20%)</title><rect x="1107.4" y="245" width="2.4" height="15.0" fill="rgb(250,76,29)" rx="2" ry="2" />
<text  x="1110.42" y="255.5" ></text>
</g>
<g >
<title>runtime.notesleep (2 samples, 0.20%)</title><rect x="736.4" y="229" width="2.4" height="15.0" fill="rgb(229,176,19)" rx="2" ry="2" />
<text  x="739.43" y="239.5" ></text>
</g>
<g >
<title>runtime.walltime (2 samples, 0.20%)</title><rect x="169.2" y="261" width="2.4" height="15.0" fill="rgb(227,23,7)" rx="2" ry="2" />
<text  x="172.17" y="271.5" ></text>
</g>
<g >
<title>syscall.read (115 samples, 11.66%)</title><rect x="11.2" y="213" width="137.6" height="15.0" fill="rgb(209,57,51)" rx="2" ry="2" />
<text  x="14.20" y="223.5" >syscall.read</text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.10%)</title><rect x="731.6" y="277" width="1.2" height="15.0" fill="rgb(223,109,48)" rx="2" ry="2" />
<text  x="734.64" y="287.5" ></text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.10%)</title><rect x="729.2" y="229" width="1.2" height="15.0" fill="rgb(233,47,31)" rx="2" ry="2" />
<text  x="732.25" y="239.5" ></text>
</g>
<g >
<title>fmt.Fprintf (115 samples, 11.66%)</title><rect x="312.8" y="229" width="137.6" height="15.0" fill="rgb(224,10,0)" rx="2" ry="2" />
<text  x="315.78" y="239.5" >fmt.Fprintf</text>
</g>
<g >
<title>syscall.Write (110 samples, 11.16%)</title><rect x="177.5" y="229" width="131.7" height="15.0" fill="rgb(220,4,31)" rx="2" ry="2" />
<text  x="180.55" y="239.5" >syscall.Write</text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.10%)</title><rect x="156.0" y="181" width="1.2" height="15.0" fill="rgb(231,84,46)" rx="2" ry="2" />
<text  x="159.00" y="191.5" ></text>
</g>
<g >
<title>net/url.parse (1 samples, 0.10%)</title><rect x="154.8" y="261" width="1.2" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="157.81" y="271.5" ></text>
</g>
<g >
<title>runtime.lock2 (1 samples, 0.10%)</title><rect x="1148.1" y="213" width="1.2" height="15.0" fill="rgb(231,38,9)" rx="2" ry="2" />
<text  x="1151.11" y="223.5" ></text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/handlers.getStatsTags (1 samples, 0.10%)</title><rect x="451.6" y="245" width="1.2" height="15.0" fill="rgb(212,36,23)" rx="2" ry="2" />
<text  x="454.60" y="255.5" ></text>
</g>
<g >
<title>runtime.stealWork (57 samples, 5.78%)</title><rect x="1041.6" y="261" width="68.2" height="15.0" fill="rgb(205,123,20)" rx="2" ry="2" />
<text  x="1044.60" y="271.5" >runtime..</text>
</g>
<g >
<title>syscall.write (110 samples, 11.16%)</title><rect x="177.5" y="213" width="131.7" height="15.0" fill="rgb(220,66,51)" rx="2" ry="2" />
<text  x="180.55" y="223.5" >syscall.write</text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (1 samples, 0.10%)</title><rect x="1188.8" y="309" width="1.2" height="15.0" fill="rgb(247,2,0)" rx="2" ry="2" />
<text  x="1191.80" y="319.5" ></text>
</g>
<g >
<title>syscall.Read (115 samples, 11.66%)</title><rect x="11.2" y="229" width="137.6" height="15.0" fill="rgb(210,128,39)" rx="2" ry="2" />
<text  x="14.20" y="239.5" >syscall.Read</text>
</g>
<g >
<title>runtime.slicebytetostring (2 samples, 0.20%)</title><rect x="462.4" y="197" width="2.4" height="15.0" fill="rgb(231,184,22)" rx="2" ry="2" />
<text  x="465.37" y="207.5" ></text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/handlers.Hello (1 samples, 0.10%)</title><rect x="450.4" y="245" width="1.2" height="15.0" fill="rgb(232,37,36)" rx="2" ry="2" />
<text  x="453.41" y="255.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).waitRead (1 samples, 0.10%)</title><rect x="10.0" y="229" width="1.2" height="15.0" fill="rgb(243,51,37)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>net/http.(*ServeMux).shouldRedirectRLocked (1 samples, 0.10%)</title><rect x="311.6" y="261" width="1.2" height="15.0" fill="rgb(221,6,44)" rx="2" ry="2" />
<text  x="314.58" y="271.5" ></text>
</g>
<g >
<title>runtime.checkRunqsNoP (1 samples, 0.10%)</title><rect x="735.2" y="261" width="1.2" height="15.0" fill="rgb(208,29,31)" rx="2" ry="2" />
<text  x="738.23" y="271.5" ></text>
</g>
<g >
<title>syscall.read (50 samples, 5.07%)</title><rect x="668.2" y="261" width="59.9" height="15.0" fill="rgb(242,55,52)" rx="2" ry="2" />
<text  x="671.22" y="271.5" >syscal..</text>
</g>
<g >
<title>net/http.HandlerFunc.ServeHTTP (297 samples, 30.12%)</title><rect x="312.8" y="277" width="355.4" height="15.0" fill="rgb(209,123,49)" rx="2" ry="2" />
<text  x="315.78" y="287.5" >net/http.HandlerFunc.ServeHTTP</text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.10%)</title><rect x="1162.5" y="277" width="1.2" height="15.0" fill="rgb(232,43,30)" rx="2" ry="2" />
<text  x="1165.47" y="287.5" ></text>
</g>
<g >
<title>regexp.newBitState (1 samples, 0.10%)</title><rect x="468.4" y="165" width="1.2" height="15.0" fill="rgb(251,85,32)" rx="2" ry="2" />
<text  x="471.36" y="175.5" ></text>
</g>
<g >
<title>runtime.mPark (86 samples, 8.72%)</title><rect x="747.2" y="261" width="102.9" height="15.0" fill="rgb(217,81,26)" rx="2" ry="2" />
<text  x="750.20" y="271.5" >runtime.mPark</text>
</g>
<g >
<title>net/http.(*connReader).Read (116 samples, 11.76%)</title><rect x="10.0" y="277" width="138.8" height="15.0" fill="rgb(214,148,0)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >net/http.(*connRe..</text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.10%)</title><rect x="455.2" y="149" width="1.2" height="15.0" fill="rgb(225,199,9)" rx="2" ry="2" />
<text  x="458.19" y="159.5" ></text>
</g>
<g >
<title>runtime.exitsyscall0 (1 samples, 0.10%)</title><rect x="731.6" y="309" width="1.2" height="15.0" fill="rgb(228,118,17)" rx="2" ry="2" />
<text  x="734.64" y="319.5" ></text>
</g>
<g >
<title>net/http.extraHeader.Write (1 samples, 0.10%)</title><rect x="176.3" y="245" width="1.2" height="15.0" fill="rgb(223,170,16)" rx="2" ry="2" />
<text  x="179.35" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (10 samples, 1.01%)</title><rect x="1176.8" y="245" width="12.0" height="15.0" fill="rgb(223,147,51)" rx="2" ry="2" />
<text  x="1179.84" y="255.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.10%)</title><rect x="730.4" y="261" width="1.2" height="15.0" fill="rgb(243,97,51)" rx="2" ry="2" />
<text  x="733.45" y="271.5" ></text>
</g>
<g >
<title>net/url.ParseRequestURI (1 samples, 0.10%)</title><rect x="154.8" y="277" width="1.2" height="15.0" fill="rgb(206,180,28)" rx="2" ry="2" />
<text  x="157.81" y="287.5" ></text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/stats.RecordTimer (5 samples, 0.51%)</title><rect x="464.8" y="245" width="6.0" height="15.0" fill="rgb(249,227,28)" rx="2" ry="2" />
<text  x="467.77" y="255.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.10%)</title><rect x="463.6" y="181" width="1.2" height="15.0" fill="rgb(247,158,37)" rx="2" ry="2" />
<text  x="466.57" y="191.5" ></text>
</g>
<g >
<title>runtime.sysUnusedOS (1 samples, 0.10%)</title><rect x="1157.7" y="293" width="1.2" height="15.0" fill="rgb(208,82,42)" rx="2" ry="2" />
<text  x="1160.69" y="303.5" ></text>
</g>
<g >
<title>regexp.(*Regexp).backtrack (3 samples, 0.30%)</title><rect x="456.4" y="165" width="3.6" height="15.0" fill="rgb(249,209,6)" rx="2" ry="2" />
<text  x="459.39" y="175.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.10%)</title><rect x="735.2" y="229" width="1.2" height="15.0" fill="rgb(249,73,34)" rx="2" ry="2" />
<text  x="738.23" y="239.5" ></text>
</g>
<g >
<title>runtime.schedule (4 samples, 0.41%)</title><rect x="1148.1" y="261" width="4.8" height="15.0" fill="rgb(227,11,1)" rx="2" ry="2" />
<text  x="1151.11" y="271.5" ></text>
</g>
<g >
<title>runtime.schedule (346 samples, 35.09%)</title><rect x="734.0" y="293" width="414.1" height="15.0" fill="rgb(244,120,54)" rx="2" ry="2" />
<text  x="737.04" y="303.5" >runtime.schedule</text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.10%)</title><rect x="166.8" y="293" width="1.2" height="15.0" fill="rgb(239,205,7)" rx="2" ry="2" />
<text  x="169.77" y="303.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.20%)</title><rect x="729.2" y="309" width="2.4" height="15.0" fill="rgb(224,67,54)" rx="2" ry="2" />
<text  x="732.25" y="319.5" ></text>
</g>
<g >
<title>time.Duration.String (2 samples, 0.20%)</title><rect x="316.4" y="165" width="2.4" height="15.0" fill="rgb(232,76,40)" rx="2" ry="2" />
<text  x="319.37" y="175.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.10%)</title><rect x="1187.6" y="229" width="1.2" height="15.0" fill="rgb(243,50,52)" rx="2" ry="2" />
<text  x="1190.61" y="239.5" ></text>
</g>
<g >
<title>runtime.startm (5 samples, 0.51%)</title><rect x="1167.3" y="261" width="5.9" height="15.0" fill="rgb(208,63,47)" rx="2" ry="2" />
<text  x="1170.26" y="271.5" ></text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.10%)</title><rect x="469.6" y="181" width="1.2" height="15.0" fill="rgb(230,54,46)" rx="2" ry="2" />
<text  x="472.55" y="191.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (5 samples, 0.51%)</title><rect x="1167.3" y="309" width="5.9" height="15.0" fill="rgb(226,142,4)" rx="2" ry="2" />
<text  x="1170.26" y="319.5" ></text>
</g>
<g >
<title>runtime.mapiterinit (1 samples, 0.10%)</title><rect x="148.8" y="277" width="1.2" height="15.0" fill="rgb(224,56,13)" rx="2" ry="2" />
<text  x="151.82" y="287.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (1 samples, 0.10%)</title><rect x="730.4" y="245" width="1.2" height="15.0" fill="rgb(251,99,35)" rx="2" ry="2" />
<text  x="733.45" y="255.5" ></text>
</g>
<g >
<title>runtime.rawstring (1 samples, 0.10%)</title><rect x="464.8" y="181" width="1.2" height="15.0" fill="rgb(230,191,32)" rx="2" ry="2" />
<text  x="467.77" y="191.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (4 samples, 0.41%)</title><rect x="1148.1" y="277" width="4.8" height="15.0" fill="rgb(237,33,47)" rx="2" ry="2" />
<text  x="1151.11" y="287.5" ></text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/handlers.parseUserAgent (1 samples, 0.10%)</title><rect x="451.6" y="229" width="1.2" height="15.0" fill="rgb(242,58,5)" rx="2" ry="2" />
<text  x="454.60" y="239.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (1 samples, 0.10%)</title><rect x="321.2" y="197" width="1.2" height="15.0" fill="rgb(219,92,17)" rx="2" ry="2" />
<text  x="324.16" y="207.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (2 samples, 0.20%)</title><rect x="156.0" y="277" width="2.4" height="15.0" fill="rgb(240,228,24)" rx="2" ry="2" />
<text  x="159.00" y="287.5" ></text>
</g>
<g >
<title>indexbytebody (1 samples, 0.10%)</title><rect x="160.8" y="213" width="1.2" height="15.0" fill="rgb(249,162,50)" rx="2" ry="2" />
<text  x="163.79" y="223.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (50 samples, 5.07%)</title><rect x="668.2" y="293" width="59.9" height="15.0" fill="rgb(224,145,18)" rx="2" ry="2" />
<text  x="671.22" y="303.5" >net.(*..</text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.10%)</title><rect x="1162.5" y="261" width="1.2" height="15.0" fill="rgb(220,99,17)" rx="2" ry="2" />
<text  x="1165.47" y="271.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (1 samples, 0.10%)</title><rect x="667.0" y="213" width="1.2" height="15.0" fill="rgb(253,212,14)" rx="2" ry="2" />
<text  x="670.02" y="223.5" ></text>
</g>
<g >
<title>runtime.notewakeup (5 samples, 0.51%)</title><rect x="1167.3" y="245" width="5.9" height="15.0" fill="rgb(233,220,45)" rx="2" ry="2" />
<text  x="1170.26" y="255.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.20%)</title><rect x="460.0" y="165" width="2.4" height="15.0" fill="rgb(212,172,51)" rx="2" ry="2" />
<text  x="462.98" y="175.5" ></text>
</g>
<g >
<title>syscall.Read (50 samples, 5.07%)</title><rect x="668.2" y="277" width="59.9" height="15.0" fill="rgb(250,207,23)" rx="2" ry="2" />
<text  x="671.22" y="287.5" >syscal..</text>
</g>
<g >
<title>runtime.runqsteal (51 samples, 5.17%)</title><rect x="1046.4" y="245" width="61.0" height="15.0" fill="rgb(250,58,49)" rx="2" ry="2" />
<text  x="1049.39" y="255.5" >runtim..</text>
</g>
<g >
<title>regexp.(*Regexp).doExecute (3 samples, 0.30%)</title><rect x="456.4" y="181" width="3.6" height="15.0" fill="rgb(246,210,36)" rx="2" ry="2" />
<text  x="459.39" y="191.5" ></text>
</g>
<g >
<title>net/http.(*chunkWriter).Write (2 samples, 0.20%)</title><rect x="175.2" y="277" width="2.3" height="15.0" fill="rgb(206,138,31)" rx="2" ry="2" />
<text  x="178.15" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (1 samples, 0.10%)</title><rect x="728.1" y="277" width="1.1" height="15.0" fill="rgb(223,157,20)" rx="2" ry="2" />
<text  x="731.05" y="287.5" ></text>
</g>
<g >
<title>context.withCancel (1 samples, 0.10%)</title><rect x="152.4" y="277" width="1.2" height="15.0" fill="rgb(216,225,21)" rx="2" ry="2" />
<text  x="155.41" y="287.5" ></text>
</g>
<g >
<title>runtime.preemptone (3 samples, 0.30%)</title><rect x="1158.9" y="245" width="3.6" height="15.0" fill="rgb(208,212,40)" rx="2" ry="2" />
<text  x="1161.88" y="255.5" ></text>
</g>
<g >
<title>runtime.morestack (7 samples, 0.71%)</title><rect x="1148.1" y="325" width="8.4" height="15.0" fill="rgb(241,170,30)" rx="2" ry="2" />
<text  x="1151.11" y="335.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (1 samples, 0.10%)</title><rect x="455.2" y="37" width="1.2" height="15.0" fill="rgb(239,189,35)" rx="2" ry="2" />
<text  x="458.19" y="47.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.20%)</title><rect x="1154.1" y="261" width="2.4" height="15.0" fill="rgb(228,35,21)" rx="2" ry="2" />
<text  x="1157.10" y="271.5" ></text>
</g>
<g >
<title>net/http.(*response).finishRequest (113 samples, 11.46%)</title><rect x="175.2" y="309" width="135.2" height="15.0" fill="rgb(250,117,30)" rx="2" ry="2" />
<text  x="178.15" y="319.5" >net/http.(*respon..</text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.10%)</title><rect x="1188.8" y="277" width="1.2" height="15.0" fill="rgb(213,207,43)" rx="2" ry="2" />
<text  x="1191.80" y="287.5" ></text>
</g>
<g >
<title>runtime.sysUsedOS (1 samples, 0.10%)</title><rect x="1156.5" y="293" width="1.2" height="15.0" fill="rgb(205,148,4)" rx="2" ry="2" />
<text  x="1159.49" y="303.5" ></text>
</g>
<g >
<title>sync.(*Cond).Wait (1 samples, 0.10%)</title><rect x="309.2" y="277" width="1.2" height="15.0" fill="rgb(227,123,26)" rx="2" ry="2" />
<text  x="312.19" y="287.5" ></text>
</g>
<g >
<title>all (986 samples, 100%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(239,177,23)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.10%)</title><rect x="1188.8" y="245" width="1.2" height="15.0" fill="rgb(205,183,24)" rx="2" ry="2" />
<text  x="1191.80" y="255.5" ></text>
</g>
<g >
<title>internal/poll.setDeadlineImpl (1 samples, 0.10%)</title><rect x="150.0" y="293" width="1.2" height="15.0" fill="rgb(207,87,40)" rx="2" ry="2" />
<text  x="153.02" y="303.5" ></text>
</g>
<g >
<title>net/http.(*chunkWriter).writeHeader (2 samples, 0.20%)</title><rect x="175.2" y="261" width="2.3" height="15.0" fill="rgb(236,106,2)" rx="2" ry="2" />
<text  x="178.15" y="271.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (3 samples, 0.30%)</title><rect x="1158.9" y="261" width="3.6" height="15.0" fill="rgb(211,185,54)" rx="2" ry="2" />
<text  x="1161.88" y="271.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (1 samples, 0.10%)</title><rect x="168.0" y="261" width="1.2" height="15.0" fill="rgb(241,2,1)" rx="2" ry="2" />
<text  x="170.97" y="271.5" ></text>
</g>
<g >
<title>syscall.nametomib (128 samples, 12.98%)</title><rect x="470.8" y="197" width="153.1" height="15.0" fill="rgb(216,48,36)" rx="2" ry="2" />
<text  x="473.75" y="207.5" >syscall.nametomib</text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.10%)</title><rect x="455.2" y="181" width="1.2" height="15.0" fill="rgb(210,19,19)" rx="2" ry="2" />
<text  x="458.19" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (9 samples, 0.91%)</title><rect x="1176.8" y="229" width="10.8" height="15.0" fill="rgb(214,10,5)" rx="2" ry="2" />
<text  x="1179.84" y="239.5" ></text>
</g>
<g >
<title>net/http.serverHandler.ServeHTTP (299 samples, 30.32%)</title><rect x="310.4" y="309" width="357.8" height="15.0" fill="rgb(205,32,47)" rx="2" ry="2" />
<text  x="313.39" y="319.5" >net/http.serverHandler.ServeHTTP</text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.20%)</title><rect x="316.4" y="133" width="2.4" height="15.0" fill="rgb(207,229,12)" rx="2" ry="2" />
<text  x="319.37" y="143.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (2 samples, 0.20%)</title><rect x="1148.1" y="229" width="2.4" height="15.0" fill="rgb(231,165,17)" rx="2" ry="2" />
<text  x="1151.11" y="239.5" ></text>
</g>
<g >
<title>runtime.newproc1 (1 samples, 0.10%)</title><rect x="172.8" y="245" width="1.2" height="15.0" fill="rgb(230,196,53)" rx="2" ry="2" />
<text  x="175.76" y="255.5" ></text>
</g>
<g >
<title>context.propagateCancel (1 samples, 0.10%)</title><rect x="152.4" y="261" width="1.2" height="15.0" fill="rgb(232,121,23)" rx="2" ry="2" />
<text  x="155.41" y="271.5" ></text>
</g>
<g >
<title>net/http.(*ServeMux).ServeHTTP (299 samples, 30.32%)</title><rect x="310.4" y="293" width="357.8" height="15.0" fill="rgb(214,62,23)" rx="2" ry="2" />
<text  x="313.39" y="303.5" >net/http.(*ServeMux).ServeHTTP</text>
</g>
<g >
<title>runtime.writeHeapBits.write (1 samples, 0.10%)</title><rect x="166.8" y="245" width="1.2" height="15.0" fill="rgb(210,125,22)" rx="2" ry="2" />
<text  x="169.77" y="255.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.10%)</title><rect x="1149.3" y="213" width="1.2" height="15.0" fill="rgb(230,112,8)" rx="2" ry="2" />
<text  x="1152.31" y="223.5" ></text>
</g>
<g >
<title>net/textproto.(*Reader).ReadMIMEHeader (5 samples, 0.51%)</title><rect x="158.4" y="293" width="6.0" height="15.0" fill="rgb(223,164,51)" rx="2" ry="2" />
<text  x="161.40" y="303.5" ></text>
</g>
<g >
<title>os.(*File).write (108 samples, 10.95%)</title><rect x="321.2" y="213" width="129.2" height="15.0" fill="rgb(247,117,44)" rx="2" ry="2" />
<text  x="324.16" y="223.5" >os.(*File).write</text>
</g>
<g >
<title>runtime.nanotime (2 samples, 0.20%)</title><rect x="1044.0" y="245" width="2.4" height="15.0" fill="rgb(219,112,15)" rx="2" ry="2" />
<text  x="1047.00" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.10%)</title><rect x="156.0" y="213" width="1.2" height="15.0" fill="rgb(228,220,24)" rx="2" ry="2" />
<text  x="159.00" y="223.5" ></text>
</g>
<g >
<title>regexp.(*Regexp).doExecute (1 samples, 0.10%)</title><rect x="468.4" y="181" width="1.2" height="15.0" fill="rgb(254,71,45)" rx="2" ry="2" />
<text  x="471.36" y="191.5" ></text>
</g>
<g >
<title>context.WithCancel (1 samples, 0.10%)</title><rect x="152.4" y="293" width="1.2" height="15.0" fill="rgb(224,214,53)" rx="2" ry="2" />
<text  x="155.41" y="303.5" ></text>
</g>
<g >
<title>regexp.(*Regexp).ReplaceAllString (2 samples, 0.20%)</title><rect x="468.4" y="213" width="2.4" height="15.0" fill="rgb(236,37,32)" rx="2" ry="2" />
<text  x="471.36" y="223.5" ></text>
</g>
<g >
<title>net/http.(*ServeMux).handler (1 samples, 0.10%)</title><rect x="310.4" y="261" width="1.2" height="15.0" fill="rgb(251,3,25)" rx="2" ry="2" />
<text  x="313.39" y="271.5" ></text>
</g>
<g >
<title>runtime.concatstrings (1 samples, 0.10%)</title><rect x="464.8" y="197" width="1.2" height="15.0" fill="rgb(222,229,19)" rx="2" ry="2" />
<text  x="467.77" y="207.5" ></text>
</g>
<g >
<title>context.WithCancel.func1 (1 samples, 0.10%)</title><rect x="148.8" y="309" width="1.2" height="15.0" fill="rgb(210,139,40)" rx="2" ry="2" />
<text  x="151.82" y="319.5" ></text>
</g>
<g >
<title>runtime.forEachP (4 samples, 0.41%)</title><rect x="1162.5" y="293" width="4.8" height="15.0" fill="rgb(214,191,48)" rx="2" ry="2" />
<text  x="1165.47" y="303.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.10%)</title><rect x="315.2" y="149" width="1.2" height="15.0" fill="rgb(218,186,4)" rx="2" ry="2" />
<text  x="318.17" y="159.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.10%)</title><rect x="469.6" y="165" width="1.2" height="15.0" fill="rgb(251,150,54)" rx="2" ry="2" />
<text  x="472.55" y="175.5" ></text>
</g>
<g >
<title>runtime.mcall (348 samples, 35.29%)</title><rect x="731.6" y="325" width="416.5" height="15.0" fill="rgb(208,74,11)" rx="2" ry="2" />
<text  x="734.64" y="335.5" >runtime.mcall</text>
</g>
<g >
<title>context.(*cancelCtx).cancel (1 samples, 0.10%)</title><rect x="148.8" y="293" width="1.2" height="15.0" fill="rgb(206,132,35)" rx="2" ry="2" />
<text  x="151.82" y="303.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (1 samples, 0.10%)</title><rect x="1157.7" y="309" width="1.2" height="15.0" fill="rgb(232,29,54)" rx="2" ry="2" />
<text  x="1160.69" y="319.5" ></text>
</g>
<g >
<title>runtime.runqgrab (1 samples, 0.10%)</title><rect x="1150.5" y="197" width="1.2" height="15.0" fill="rgb(223,51,23)" rx="2" ry="2" />
<text  x="1153.51" y="207.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).SetReadDeadline (1 samples, 0.10%)</title><rect x="150.0" y="309" width="1.2" height="15.0" fill="rgb(234,229,45)" rx="2" ry="2" />
<text  x="153.02" y="319.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (3 samples, 0.30%)</title><rect x="1158.9" y="309" width="3.6" height="15.0" fill="rgb(239,148,23)" rx="2" ry="2" />
<text  x="1161.88" y="319.5" ></text>
</g>
<g >
<title>runtime.signalM (3 samples, 0.30%)</title><rect x="1158.9" y="229" width="3.6" height="15.0" fill="rgb(223,87,32)" rx="2" ry="2" />
<text  x="1161.88" y="239.5" ></text>
</g>
<g >
<title>net/http.(*conn).setState (2 samples, 0.20%)</title><rect x="169.2" y="309" width="2.4" height="15.0" fill="rgb(206,92,31)" rx="2" ry="2" />
<text  x="172.17" y="319.5" ></text>
</g>
<g >
<title>time.now (2 samples, 0.20%)</title><rect x="169.2" y="277" width="2.4" height="15.0" fill="rgb(240,121,29)" rx="2" ry="2" />
<text  x="172.17" y="287.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.10%)</title><rect x="1151.7" y="181" width="1.2" height="15.0" fill="rgb(239,69,51)" rx="2" ry="2" />
<text  x="1154.70" y="191.5" ></text>
</g>
<g >
<title>bytes.Cut (1 samples, 0.10%)</title><rect x="160.8" y="245" width="1.2" height="15.0" fill="rgb(214,50,44)" rx="2" ry="2" />
<text  x="163.79" y="255.5" ></text>
</g>
<g >
<title>syscall.sysctl (128 samples, 12.98%)</title><rect x="470.8" y="181" width="153.1" height="15.0" fill="rgb(234,115,0)" rx="2" ry="2" />
<text  x="473.75" y="191.5" >syscall.sysctl</text>
</g>
<g >
<title>runtime.notewakeup (28 samples, 2.84%)</title><rect x="1114.6" y="229" width="33.5" height="15.0" fill="rgb(246,162,3)" rx="2" ry="2" />
<text  x="1117.60" y="239.5" >ru..</text>
</g>
<g >
<title>runtime.injectglist (7 samples, 0.71%)</title><rect x="738.8" y="261" width="8.4" height="15.0" fill="rgb(223,191,39)" rx="2" ry="2" />
<text  x="741.82" y="271.5" ></text>
</g>
<g >
<title>runtime.goexit0 (1 samples, 0.10%)</title><rect x="732.8" y="309" width="1.2" height="15.0" fill="rgb(246,20,5)" rx="2" ry="2" />
<text  x="735.84" y="319.5" ></text>
</g>
<g >
<title>runtime.signalM (3 samples, 0.30%)</title><rect x="1163.7" y="245" width="3.6" height="15.0" fill="rgb(238,202,16)" rx="2" ry="2" />
<text  x="1166.67" y="255.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (2 samples, 0.20%)</title><rect x="729.2" y="293" width="2.4" height="15.0" fill="rgb(230,20,36)" rx="2" ry="2" />
<text  x="732.25" y="303.5" ></text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/stats.addTagsToName (3 samples, 0.30%)</title><rect x="464.8" y="229" width="3.6" height="15.0" fill="rgb(205,85,46)" rx="2" ry="2" />
<text  x="467.77" y="239.5" ></text>
</g>
<g >
<title>runtime.newproc.func1 (2 samples, 0.20%)</title><rect x="172.8" y="261" width="2.4" height="15.0" fill="rgb(239,171,5)" rx="2" ry="2" />
<text  x="175.76" y="271.5" ></text>
</g>
<g >
<title>runtime.lock2 (1 samples, 0.10%)</title><rect x="150.0" y="261" width="1.2" height="15.0" fill="rgb(223,101,18)" rx="2" ry="2" />
<text  x="153.02" y="271.5" ></text>
</g>
<g >
<title>runtime.injectglist.func1 (7 samples, 0.71%)</title><rect x="738.8" y="245" width="8.4" height="15.0" fill="rgb(219,219,0)" rx="2" ry="2" />
<text  x="741.82" y="255.5" ></text>
</g>
<g >
<title>runtime.concatstring2 (1 samples, 0.10%)</title><rect x="464.8" y="213" width="1.2" height="15.0" fill="rgb(216,91,2)" rx="2" ry="2" />
<text  x="467.77" y="223.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_faststr (1 samples, 0.10%)</title><rect x="311.6" y="245" width="1.2" height="15.0" fill="rgb(214,100,13)" rx="2" ry="2" />
<text  x="314.58" y="255.5" ></text>
</g>
<g >
<title>fmt.(*pp).printArg (5 samples, 0.51%)</title><rect x="312.8" y="197" width="6.0" height="15.0" fill="rgb(218,23,26)" rx="2" ry="2" />
<text  x="315.78" y="207.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.10%)</title><rect x="1151.7" y="213" width="1.2" height="15.0" fill="rgb(232,143,27)" rx="2" ry="2" />
<text  x="1154.70" y="223.5" ></text>
</g>
<g >
<title>net/textproto.(*Reader).upcomingHeaderKeys (1 samples, 0.10%)</title><rect x="160.8" y="261" width="1.2" height="15.0" fill="rgb(230,122,20)" rx="2" ry="2" />
<text  x="163.79" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.10%)</title><rect x="455.2" y="165" width="1.2" height="15.0" fill="rgb(221,10,11)" rx="2" ry="2" />
<text  x="458.19" y="175.5" ></text>
</g>
<g >
<title>runtime.walltime (1 samples, 0.10%)</title><rect x="665.8" y="213" width="1.2" height="15.0" fill="rgb(252,109,3)" rx="2" ry="2" />
<text  x="668.82" y="223.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.10%)</title><rect x="1151.7" y="197" width="1.2" height="15.0" fill="rgb(206,179,44)" rx="2" ry="2" />
<text  x="1154.70" y="207.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.10%)</title><rect x="166.8" y="261" width="1.2" height="15.0" fill="rgb(216,41,25)" rx="2" ry="2" />
<text  x="169.77" y="271.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (4 samples, 0.41%)</title><rect x="1109.8" y="277" width="4.8" height="15.0" fill="rgb(211,193,26)" rx="2" ry="2" />
<text  x="1112.82" y="287.5" ></text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.10%)</title><rect x="455.2" y="213" width="1.2" height="15.0" fill="rgb(224,116,41)" rx="2" ry="2" />
<text  x="458.19" y="223.5" ></text>
</g>
<g >
<title>runtime.notewakeup (7 samples, 0.71%)</title><rect x="738.8" y="213" width="8.4" height="15.0" fill="rgb(254,181,20)" rx="2" ry="2" />
<text  x="741.82" y="223.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).writeLock (2 samples, 0.20%)</title><rect x="322.4" y="197" width="2.3" height="15.0" fill="rgb(243,146,30)" rx="2" ry="2" />
<text  x="325.35" y="207.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (7 samples, 0.71%)</title><rect x="1148.1" y="293" width="8.4" height="15.0" fill="rgb(245,70,34)" rx="2" ry="2" />
<text  x="1151.11" y="303.5" ></text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/stats.clean (7 samples, 0.71%)</title><rect x="456.4" y="229" width="8.4" height="15.0" fill="rgb(232,41,2)" rx="2" ry="2" />
<text  x="459.39" y="239.5" ></text>
</g>
<g >
<title>syscall.Write (105 samples, 10.65%)</title><rect x="324.7" y="197" width="125.7" height="15.0" fill="rgb(250,36,23)" rx="2" ry="2" />
<text  x="327.75" y="207.5" >syscall.Write</text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.10%)</title><rect x="731.6" y="261" width="1.2" height="15.0" fill="rgb(246,115,25)" rx="2" ry="2" />
<text  x="734.64" y="271.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.10%)</title><rect x="1109.8" y="245" width="1.2" height="15.0" fill="rgb(239,18,28)" rx="2" ry="2" />
<text  x="1112.82" y="255.5" ></text>
</g>
<g >
<title>net/textproto.(*Reader).ReadLine (2 samples, 0.20%)</title><rect x="156.0" y="293" width="2.4" height="15.0" fill="rgb(211,42,47)" rx="2" ry="2" />
<text  x="159.00" y="303.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.10%)</title><rect x="164.4" y="245" width="1.2" height="15.0" fill="rgb(216,153,53)" rx="2" ry="2" />
<text  x="167.38" y="255.5" ></text>
</g>
<g >
<title>runtime.makemap_small (1 samples, 0.10%)</title><rect x="164.4" y="293" width="1.2" height="15.0" fill="rgb(205,175,44)" rx="2" ry="2" />
<text  x="167.38" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="455.2" y="197" width="1.2" height="15.0" fill="rgb(230,27,52)" rx="2" ry="2" />
<text  x="458.19" y="207.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.10%)</title><rect x="174.0" y="245" width="1.2" height="15.0" fill="rgb(241,74,31)" rx="2" ry="2" />
<text  x="176.96" y="255.5" ></text>
</g>
<g >
<title>runtime.wakep (28 samples, 2.84%)</title><rect x="1114.6" y="261" width="33.5" height="15.0" fill="rgb(227,200,44)" rx="2" ry="2" />
<text  x="1117.60" y="271.5" >ru..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.10%)</title><rect x="321.2" y="85" width="1.2" height="15.0" fill="rgb(241,35,10)" rx="2" ry="2" />
<text  x="324.16" y="95.5" ></text>
</g>
<g >
<title>runtime.lock2 (1 samples, 0.10%)</title><rect x="1109.8" y="261" width="1.2" height="15.0" fill="rgb(229,177,25)" rx="2" ry="2" />
<text  x="1112.82" y="271.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).wait (1 samples, 0.10%)</title><rect x="10.0" y="213" width="1.2" height="15.0" fill="rgb(243,33,16)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwunlock (1 samples, 0.10%)</title><rect x="321.2" y="165" width="1.2" height="15.0" fill="rgb(215,211,37)" rx="2" ry="2" />
<text  x="324.16" y="175.5" ></text>
</g>
<g >
<title>fmt.(*pp).doPrintln (1 samples, 0.10%)</title><rect x="450.4" y="213" width="1.2" height="15.0" fill="rgb(244,72,11)" rx="2" ry="2" />
<text  x="453.41" y="223.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (4 samples, 0.41%)</title><rect x="1162.5" y="309" width="4.8" height="15.0" fill="rgb(254,30,48)" rx="2" ry="2" />
<text  x="1165.47" y="319.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="462.4" y="181" width="1.2" height="15.0" fill="rgb(218,146,4)" rx="2" ry="2" />
<text  x="465.37" y="191.5" ></text>
</g>
<g >
<title>runtime.lock2 (1 samples, 0.10%)</title><rect x="1152.9" y="261" width="1.2" height="15.0" fill="rgb(208,159,17)" rx="2" ry="2" />
<text  x="1155.90" y="271.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (1 samples, 0.10%)</title><rect x="732.8" y="245" width="1.2" height="15.0" fill="rgb(223,29,30)" rx="2" ry="2" />
<text  x="735.84" y="255.5" ></text>
</g>
<g >
<title>runtime.alignUp (1 samples, 0.10%)</title><rect x="464.8" y="165" width="1.2" height="15.0" fill="rgb(211,221,36)" rx="2" ry="2" />
<text  x="467.77" y="175.5" ></text>
</g>
<g >
<title>runtime.netpoll (160 samples, 16.23%)</title><rect x="850.1" y="261" width="191.5" height="15.0" fill="rgb(211,190,31)" rx="2" ry="2" />
<text  x="853.12" y="271.5" >runtime.netpoll</text>
</g>
<g >
<title>fmt.Fprintln (1 samples, 0.10%)</title><rect x="450.4" y="229" width="1.2" height="15.0" fill="rgb(233,142,52)" rx="2" ry="2" />
<text  x="453.41" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (1 samples, 0.10%)</title><rect x="455.2" y="69" width="1.2" height="15.0" fill="rgb(251,183,30)" rx="2" ry="2" />
<text  x="458.19" y="79.5" ></text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.10%)</title><rect x="1188.8" y="293" width="1.2" height="15.0" fill="rgb(220,40,7)" rx="2" ry="2" />
<text  x="1191.80" y="303.5" ></text>
</g>
<g >
<title>net.(*conn).Write (110 samples, 11.16%)</title><rect x="177.5" y="261" width="131.7" height="15.0" fill="rgb(233,102,15)" rx="2" ry="2" />
<text  x="180.55" y="271.5" >net.(*conn).Write</text>
</g>
<g >
<title>runtime.kevent (158 samples, 16.02%)</title><rect x="852.5" y="245" width="189.1" height="15.0" fill="rgb(246,109,21)" rx="2" ry="2" />
<text  x="855.52" y="255.5" >runtime.kevent</text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.20%)</title><rect x="736.4" y="213" width="2.4" height="15.0" fill="rgb(250,2,13)" rx="2" ry="2" />
<text  x="739.43" y="223.5" ></text>
</g>
<g >
<title>fmt.Printf (115 samples, 11.66%)</title><rect x="312.8" y="245" width="137.6" height="15.0" fill="rgb(231,37,18)" rx="2" ry="2" />
<text  x="315.78" y="255.5" >fmt.Printf</text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.10%)</title><rect x="162.0" y="229" width="1.2" height="15.0" fill="rgb(246,152,1)" rx="2" ry="2" />
<text  x="164.99" y="239.5" ></text>
</g>
<g >
<title>runtime.runqgrab (51 samples, 5.17%)</title><rect x="1046.4" y="229" width="61.0" height="15.0" fill="rgb(228,156,7)" rx="2" ry="2" />
<text  x="1049.39" y="239.5" >runtim..</text>
</g>
<g >
<title>runtime.ready (5 samples, 0.51%)</title><rect x="1167.3" y="293" width="5.9" height="15.0" fill="rgb(249,211,37)" rx="2" ry="2" />
<text  x="1170.26" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="162.0" y="245" width="1.2" height="15.0" fill="rgb(245,165,25)" rx="2" ry="2" />
<text  x="164.99" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.10%)</title><rect x="1109.8" y="229" width="1.2" height="15.0" fill="rgb(247,127,34)" rx="2" ry="2" />
<text  x="1112.82" y="239.5" ></text>
</g>
<g >
<title>runtime.semawakeup (7 samples, 0.71%)</title><rect x="738.8" y="197" width="8.4" height="15.0" fill="rgb(209,208,24)" rx="2" ry="2" />
<text  x="741.82" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.10%)</title><rect x="1173.2" y="261" width="1.2" height="15.0" fill="rgb(232,98,41)" rx="2" ry="2" />
<text  x="1176.25" y="271.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.10%)</title><rect x="667.0" y="229" width="1.2" height="15.0" fill="rgb(242,25,34)" rx="2" ry="2" />
<text  x="670.02" y="239.5" ></text>
</g>
<g >
<title>syscall.syscall (50 samples, 5.07%)</title><rect x="668.2" y="245" width="59.9" height="15.0" fill="rgb(245,6,26)" rx="2" ry="2" />
<text  x="671.22" y="255.5" >syscal..</text>
</g>
<g >
<title>os.Hostname (163 samples, 16.53%)</title><rect x="470.8" y="245" width="195.0" height="15.0" fill="rgb(224,222,1)" rx="2" ry="2" />
<text  x="473.75" y="255.5" >os.Hostname</text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.10%)</title><rect x="1150.5" y="181" width="1.2" height="15.0" fill="rgb(211,171,19)" rx="2" ry="2" />
<text  x="1153.51" y="191.5" ></text>
</g>
<g >
<title>syscall.syscall (105 samples, 10.65%)</title><rect x="324.7" y="165" width="125.7" height="15.0" fill="rgb(238,118,8)" rx="2" ry="2" />
<text  x="327.75" y="175.5" >syscall.syscall</text>
</g>
<g >
<title>runtime.scanobject (1 samples, 0.10%)</title><rect x="156.0" y="149" width="1.2" height="15.0" fill="rgb(210,5,1)" rx="2" ry="2" />
<text  x="159.00" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.10%)</title><rect x="455.2" y="117" width="1.2" height="15.0" fill="rgb(226,70,47)" rx="2" ry="2" />
<text  x="458.19" y="127.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (27 samples, 2.74%)</title><rect x="1114.6" y="197" width="32.3" height="15.0" fill="rgb(213,205,43)" rx="2" ry="2" />
<text  x="1117.60" y="207.5" >ru..</text>
</g>
<g >
<title>net/http.(*ServeMux).Handler (2 samples, 0.20%)</title><rect x="310.4" y="277" width="2.4" height="15.0" fill="rgb(233,174,14)" rx="2" ry="2" />
<text  x="313.39" y="287.5" ></text>
</g>
<g >
<title>runtime.park_m (346 samples, 35.09%)</title><rect x="734.0" y="309" width="414.1" height="15.0" fill="rgb(229,116,10)" rx="2" ry="2" />
<text  x="737.04" y="319.5" >runtime.park_m</text>
</g>
<g >
<title>runtime.runqsteal (1 samples, 0.10%)</title><rect x="1150.5" y="213" width="1.2" height="15.0" fill="rgb(206,224,9)" rx="2" ry="2" />
<text  x="1153.51" y="223.5" ></text>
</g>
<g >
<title>runtime.wakep (5 samples, 0.51%)</title><rect x="1167.3" y="277" width="5.9" height="15.0" fill="rgb(209,207,3)" rx="2" ry="2" />
<text  x="1170.26" y="287.5" ></text>
</g>
<g >
<title>runtime.startm (7 samples, 0.71%)</title><rect x="738.8" y="229" width="8.4" height="15.0" fill="rgb(252,193,23)" rx="2" ry="2" />
<text  x="741.82" y="239.5" ></text>
</g>
<g >
<title>runtime.notesleep (86 samples, 8.72%)</title><rect x="747.2" y="245" width="102.9" height="15.0" fill="rgb(229,88,32)" rx="2" ry="2" />
<text  x="750.20" y="255.5" >runtime.note..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="171.6" y="277" width="1.2" height="15.0" fill="rgb(213,174,26)" rx="2" ry="2" />
<text  x="174.56" y="287.5" ></text>
</g>
<g >
<title>runtime.findRunnable (314 samples, 31.85%)</title><rect x="734.0" y="277" width="375.8" height="15.0" fill="rgb(239,68,9)" rx="2" ry="2" />
<text  x="737.04" y="287.5" >runtime.findRunnable</text>
</g>
<g >
<title>runtime.pthread_cond_signal (7 samples, 0.71%)</title><rect x="738.8" y="181" width="8.4" height="15.0" fill="rgb(226,76,37)" rx="2" ry="2" />
<text  x="741.82" y="191.5" ></text>
</g>
<g >
<title>runtime.gcstopm (2 samples, 0.20%)</title><rect x="736.4" y="261" width="2.4" height="15.0" fill="rgb(240,174,11)" rx="2" ry="2" />
<text  x="739.43" y="271.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.10%)</title><rect x="1162.5" y="245" width="1.2" height="15.0" fill="rgb(247,163,2)" rx="2" ry="2" />
<text  x="1165.47" y="255.5" ></text>
</g>
<g >
<title>bytes.IndexByte (1 samples, 0.10%)</title><rect x="160.8" y="229" width="1.2" height="15.0" fill="rgb(234,87,31)" rx="2" ry="2" />
<text  x="163.79" y="239.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (1 samples, 0.10%)</title><rect x="728.1" y="293" width="1.1" height="15.0" fill="rgb(247,23,23)" rx="2" ry="2" />
<text  x="731.05" y="303.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.10%)</title><rect x="732.8" y="293" width="1.2" height="15.0" fill="rgb(210,60,37)" rx="2" ry="2" />
<text  x="735.84" y="303.5" ></text>
</g>
<g >
<title>runtime.(*gList).pop (1 samples, 0.10%)</title><rect x="172.8" y="229" width="1.2" height="15.0" fill="rgb(229,26,27)" rx="2" ry="2" />
<text  x="175.76" y="239.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.10%)</title><rect x="323.5" y="117" width="1.2" height="15.0" fill="rgb(207,161,15)" rx="2" ry="2" />
<text  x="326.55" y="127.5" ></text>
</g>
<g >
<title>syscall.syscall6 (35 samples, 3.55%)</title><rect x="623.9" y="181" width="41.9" height="15.0" fill="rgb(236,155,13)" rx="2" ry="2" />
<text  x="626.94" y="191.5" >sys..</text>
</g>
<g >
<title>syscall.Sysctl (163 samples, 16.53%)</title><rect x="470.8" y="213" width="195.0" height="15.0" fill="rgb(241,217,21)" rx="2" ry="2" />
<text  x="473.75" y="223.5" >syscall.Sysctl</text>
</g>
<g >
<title>regexp/syntax.(*Inst).MatchRune (1 samples, 0.10%)</title><rect x="458.8" y="149" width="1.2" height="15.0" fill="rgb(221,208,19)" rx="2" ry="2" />
<text  x="461.78" y="159.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_faststr (1 samples, 0.10%)</title><rect x="163.2" y="261" width="1.2" height="15.0" fill="rgb(234,51,51)" rx="2" ry="2" />
<text  x="166.18" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_kill (3 samples, 0.30%)</title><rect x="1158.9" y="213" width="3.6" height="15.0" fill="rgb(212,46,14)" rx="2" ry="2" />
<text  x="1161.88" y="223.5" ></text>
</g>
<g >
<title>runtime.resetspinning (1 samples, 0.10%)</title><rect x="1151.7" y="245" width="1.2" height="15.0" fill="rgb(234,36,45)" rx="2" ry="2" />
<text  x="1154.70" y="255.5" ></text>
</g>
<g >
<title>sync.(*poolChain).popTail (1 samples, 0.10%)</title><rect x="468.4" y="117" width="1.2" height="15.0" fill="rgb(241,4,29)" rx="2" ry="2" />
<text  x="471.36" y="127.5" ></text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/stats.addTagsToName (3 samples, 0.30%)</title><rect x="452.8" y="229" width="3.6" height="15.0" fill="rgb(238,77,36)" rx="2" ry="2" />
<text  x="455.80" y="239.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.10%)</title><rect x="1188.8" y="261" width="1.2" height="15.0" fill="rgb(212,113,10)" rx="2" ry="2" />
<text  x="1191.80" y="271.5" ></text>
</g>
<g >
<title>os.(*File).Write (1 samples, 0.10%)</title><rect x="320.0" y="213" width="1.2" height="15.0" fill="rgb(251,205,27)" rx="2" ry="2" />
<text  x="322.96" y="223.5" ></text>
</g>
<g >
<title>runtime.startm (10 samples, 1.01%)</title><rect x="1176.8" y="277" width="12.0" height="15.0" fill="rgb(236,71,7)" rx="2" ry="2" />
<text  x="1179.84" y="287.5" ></text>
</g>
<g >
<title>net/textproto.readMIMEHeader (5 samples, 0.51%)</title><rect x="158.4" y="277" width="6.0" height="15.0" fill="rgb(221,66,50)" rx="2" ry="2" />
<text  x="161.40" y="287.5" ></text>
</g>
<g >
<title>runtime.growslice (2 samples, 0.20%)</title><rect x="460.0" y="181" width="2.4" height="15.0" fill="rgb(212,147,4)" rx="2" ry="2" />
<text  x="462.98" y="191.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (2 samples, 0.20%)</title><rect x="729.2" y="325" width="2.4" height="15.0" fill="rgb(242,87,45)" rx="2" ry="2" />
<text  x="732.25" y="335.5" ></text>
</g>
<g >
<title>runtime.semrelease (1 samples, 0.10%)</title><rect x="321.2" y="149" width="1.2" height="15.0" fill="rgb(217,28,15)" rx="2" ry="2" />
<text  x="324.16" y="159.5" ></text>
</g>
<g >
<title>runtime.mPark (1 samples, 0.10%)</title><rect x="731.6" y="293" width="1.2" height="15.0" fill="rgb(216,160,44)" rx="2" ry="2" />
<text  x="734.64" y="303.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.10%)</title><rect x="164.4" y="277" width="1.2" height="15.0" fill="rgb(238,180,23)" rx="2" ry="2" />
<text  x="167.38" y="287.5" ></text>
</g>
<g >
<title>github.com/varstr/uaparser.Parse (1 samples, 0.10%)</title><rect x="451.6" y="213" width="1.2" height="15.0" fill="rgb(252,174,52)" rx="2" ry="2" />
<text  x="454.60" y="223.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.20%)</title><rect x="1154.1" y="245" width="2.4" height="15.0" fill="rgb(220,162,42)" rx="2" ry="2" />
<text  x="1157.10" y="255.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (2 samples, 0.20%)</title><rect x="316.4" y="149" width="2.4" height="15.0" fill="rgb(253,130,6)" rx="2" ry="2" />
<text  x="319.37" y="159.5" ></text>
</g>
<g >
<title>sync.(*Pool).Get (1 samples, 0.10%)</title><rect x="468.4" y="149" width="1.2" height="15.0" fill="rgb(252,29,19)" rx="2" ry="2" />
<text  x="471.36" y="159.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.10%)</title><rect x="321.2" y="133" width="1.2" height="15.0" fill="rgb(223,8,43)" rx="2" ry="2" />
<text  x="324.16" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.10%)</title><rect x="1148.1" y="181" width="1.2" height="15.0" fill="rgb(229,196,11)" rx="2" ry="2" />
<text  x="1151.11" y="191.5" ></text>
</g>
<g >
<title>time.Now (2 samples, 0.20%)</title><rect x="169.2" y="293" width="2.4" height="15.0" fill="rgb(230,55,34)" rx="2" ry="2" />
<text  x="172.17" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.10%)</title><rect x="1156.5" y="309" width="1.2" height="15.0" fill="rgb(221,84,27)" rx="2" ry="2" />
<text  x="1159.49" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (86 samples, 8.72%)</title><rect x="747.2" y="213" width="102.9" height="15.0" fill="rgb(239,40,4)" rx="2" ry="2" />
<text  x="750.20" y="223.5" >runtime.pthr..</text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.10%)</title><rect x="730.4" y="229" width="1.2" height="15.0" fill="rgb(238,178,2)" rx="2" ry="2" />
<text  x="733.45" y="239.5" ></text>
</g>
<g >
<title>internal/poll.runtime_Semacquire (1 samples, 0.10%)</title><rect x="323.5" y="165" width="1.2" height="15.0" fill="rgb(249,183,0)" rx="2" ry="2" />
<text  x="326.55" y="175.5" ></text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/handlers.WithStats.func1 (297 samples, 30.12%)</title><rect x="312.8" y="261" width="355.4" height="15.0" fill="rgb(240,67,42)" rx="2" ry="2" />
<text  x="315.78" y="271.5" >github.com/vivekprm/go-pprof-demo/handlers.WithS..</text>
</g>
<g >
<title>runtime.nanotime1 (1 samples, 0.10%)</title><rect x="735.2" y="213" width="1.2" height="15.0" fill="rgb(215,229,52)" rx="2" ry="2" />
<text  x="738.23" y="223.5" ></text>
</g>
<g >
<title>strings.Contains (1 samples, 0.10%)</title><rect x="451.6" y="181" width="1.2" height="15.0" fill="rgb(236,187,38)" rx="2" ry="2" />
<text  x="454.60" y="191.5" ></text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.10%)</title><rect x="729.2" y="245" width="1.2" height="15.0" fill="rgb(227,132,5)" rx="2" ry="2" />
<text  x="732.25" y="255.5" ></text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/stats.IncCounter (10 samples, 1.01%)</title><rect x="452.8" y="245" width="12.0" height="15.0" fill="rgb(218,36,49)" rx="2" ry="2" />
<text  x="455.80" y="255.5" ></text>
</g>
<g >
<title>net/http.readRequest (2 samples, 0.20%)</title><rect x="153.6" y="293" width="2.4" height="15.0" fill="rgb(211,80,7)" rx="2" ry="2" />
<text  x="156.61" y="303.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.10%)</title><rect x="467.2" y="197" width="1.2" height="15.0" fill="rgb(222,133,19)" rx="2" ry="2" />
<text  x="470.16" y="207.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (3 samples, 0.30%)</title><rect x="1152.9" y="277" width="3.6" height="15.0" fill="rgb(232,194,33)" rx="2" ry="2" />
<text  x="1155.90" y="287.5" ></text>
</g>
<g >
<title>runtime.newproc (2 samples, 0.20%)</title><rect x="172.8" y="293" width="2.4" height="15.0" fill="rgb(254,0,21)" rx="2" ry="2" />
<text  x="175.76" y="303.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_faststr (1 samples, 0.10%)</title><rect x="153.6" y="261" width="1.2" height="15.0" fill="rgb(245,166,2)" rx="2" ry="2" />
<text  x="156.61" y="271.5" ></text>
</g>
<g >
<title>runtime.mPark (2 samples, 0.20%)</title><rect x="736.4" y="245" width="2.4" height="15.0" fill="rgb(221,190,49)" rx="2" ry="2" />
<text  x="739.43" y="255.5" ></text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.10%)</title><rect x="728.1" y="309" width="1.1" height="15.0" fill="rgb(252,34,31)" rx="2" ry="2" />
<text  x="731.05" y="319.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.20%)</title><rect x="1174.4" y="293" width="2.4" height="15.0" fill="rgb(221,167,44)" rx="2" ry="2" />
<text  x="1177.44" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.10%)</title><rect x="1162.5" y="229" width="1.2" height="15.0" fill="rgb(242,171,49)" rx="2" ry="2" />
<text  x="1165.47" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.10%)</title><rect x="1151.7" y="165" width="1.2" height="15.0" fill="rgb(244,82,25)" rx="2" ry="2" />
<text  x="1154.70" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.10%)</title><rect x="1173.2" y="277" width="1.2" height="15.0" fill="rgb(219,15,17)" rx="2" ry="2" />
<text  x="1176.25" y="287.5" ></text>
</g>
<g >
<title>net/http.(*connReader).abortPendingRead (1 samples, 0.10%)</title><rect x="309.2" y="293" width="1.2" height="15.0" fill="rgb(218,193,39)" rx="2" ry="2" />
<text  x="312.19" y="303.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).writeUnlock (1 samples, 0.10%)</title><rect x="321.2" y="181" width="1.2" height="15.0" fill="rgb(232,164,22)" rx="2" ry="2" />
<text  x="324.16" y="191.5" ></text>
</g>
<g >
<title>runtime.mapiterinit (1 samples, 0.10%)</title><rect x="165.6" y="293" width="1.2" height="15.0" fill="rgb(235,18,37)" rx="2" ry="2" />
<text  x="168.58" y="303.5" ></text>
</g>
<g >
<title>runtime.preemptall (3 samples, 0.30%)</title><rect x="1163.7" y="277" width="3.6" height="15.0" fill="rgb(215,55,23)" rx="2" ry="2" />
<text  x="1166.67" y="287.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (116 samples, 11.76%)</title><rect x="10.0" y="245" width="138.8" height="15.0" fill="rgb(219,137,42)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >net.(*netFD).Read</text>
</g>
<g >
<title>runtime.newstack (7 samples, 0.71%)</title><rect x="1148.1" y="309" width="8.4" height="15.0" fill="rgb(246,91,19)" rx="2" ry="2" />
<text  x="1151.11" y="319.5" ></text>
</g>
<g >
<title>fmt.(*pp).printArg (1 samples, 0.10%)</title><rect x="450.4" y="197" width="1.2" height="15.0" fill="rgb(249,215,24)" rx="2" ry="2" />
<text  x="453.41" y="207.5" ></text>
</g>
<g >
<title>runtime.writeHeapBits.flush (1 samples, 0.10%)</title><rect x="466.0" y="165" width="1.2" height="15.0" fill="rgb(249,228,20)" rx="2" ry="2" />
<text  x="468.96" y="175.5" ></text>
</g>
<g >
<title>runtime.usleep (51 samples, 5.17%)</title><rect x="1046.4" y="213" width="61.0" height="15.0" fill="rgb(243,100,37)" rx="2" ry="2" />
<text  x="1049.39" y="223.5" >runtim..</text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.10%)</title><rect x="1149.3" y="197" width="1.2" height="15.0" fill="rgb(224,57,12)" rx="2" ry="2" />
<text  x="1152.31" y="207.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.10%)</title><rect x="323.5" y="133" width="1.2" height="15.0" fill="rgb(243,65,9)" rx="2" ry="2" />
<text  x="326.55" y="143.5" ></text>
</g>
<g >
<title>runtime.stealWork (1 samples, 0.10%)</title><rect x="1150.5" y="229" width="1.2" height="15.0" fill="rgb(254,148,38)" rx="2" ry="2" />
<text  x="1153.51" y="239.5" ></text>
</g>
<g >
<title>net/http.shouldClose (1 samples, 0.10%)</title><rect x="153.6" y="277" width="1.2" height="15.0" fill="rgb(225,183,12)" rx="2" ry="2" />
<text  x="156.61" y="287.5" ></text>
</g>
<g >
<title>runtime.findRunnable (3 samples, 0.30%)</title><rect x="1148.1" y="245" width="3.6" height="15.0" fill="rgb(210,6,3)" rx="2" ry="2" />
<text  x="1151.11" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (5 samples, 0.51%)</title><rect x="1167.3" y="229" width="5.9" height="15.0" fill="rgb(228,116,42)" rx="2" ry="2" />
<text  x="1170.26" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (2 samples, 0.20%)</title><rect x="736.4" y="197" width="2.4" height="15.0" fill="rgb(243,199,27)" rx="2" ry="2" />
<text  x="739.43" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2 (1 samples, 0.10%)</title><rect x="321.2" y="117" width="1.2" height="15.0" fill="rgb(206,101,24)" rx="2" ry="2" />
<text  x="324.16" y="127.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (2 samples, 0.20%)</title><rect x="1044.0" y="229" width="2.4" height="15.0" fill="rgb(228,1,12)" rx="2" ry="2" />
<text  x="1047.00" y="239.5" ></text>
</g>
<g >
<title>runtime.pidleget (1 samples, 0.10%)</title><rect x="174.0" y="213" width="1.2" height="15.0" fill="rgb(206,5,27)" rx="2" ry="2" />
<text  x="176.96" y="223.5" ></text>
</g>
<g >
<title>syscall.syscall (110 samples, 11.16%)</title><rect x="177.5" y="197" width="131.7" height="15.0" fill="rgb(246,132,50)" rx="2" ry="2" />
<text  x="180.55" y="207.5" >syscall.syscall</text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.10%)</title><rect x="321.2" y="101" width="1.2" height="15.0" fill="rgb(245,72,4)" rx="2" ry="2" />
<text  x="324.16" y="111.5" ></text>
</g>
<g >
<title>sync.runtime_notifyListAdd (1 samples, 0.10%)</title><rect x="309.2" y="261" width="1.2" height="15.0" fill="rgb(218,109,39)" rx="2" ry="2" />
<text  x="312.19" y="271.5" ></text>
</g>
<g >
<title>runtime.preemptone (3 samples, 0.30%)</title><rect x="1163.7" y="261" width="3.6" height="15.0" fill="rgb(222,190,25)" rx="2" ry="2" />
<text  x="1166.67" y="271.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.10%)</title><rect x="157.2" y="261" width="1.2" height="15.0" fill="rgb(247,40,52)" rx="2" ry="2" />
<text  x="160.20" y="271.5" ></text>
</g>
<g >
<title>runtime.gcDrain (3 samples, 0.30%)</title><rect x="1158.9" y="293" width="3.6" height="15.0" fill="rgb(211,99,17)" rx="2" ry="2" />
<text  x="1161.88" y="303.5" ></text>
</g>
<g >
<title>runtime.writeHeapBits.flush (1 samples, 0.10%)</title><rect x="164.4" y="229" width="1.2" height="15.0" fill="rgb(252,182,26)" rx="2" ry="2" />
<text  x="167.38" y="239.5" ></text>
</g>
<g >
<title>net.(*conn).Read (116 samples, 11.76%)</title><rect x="10.0" y="261" width="138.8" height="15.0" fill="rgb(254,150,19)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >net.(*conn).Read</text>
</g>
<g >
<title>net.(*conn).Read (50 samples, 5.07%)</title><rect x="668.2" y="309" width="59.9" height="15.0" fill="rgb(228,107,20)" rx="2" ry="2" />
<text  x="671.22" y="319.5" >net.(*..</text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.10%)</title><rect x="729.2" y="261" width="1.2" height="15.0" fill="rgb(222,69,12)" rx="2" ry="2" />
<text  x="732.25" y="271.5" ></text>
</g>
<g >
<title>runtime.gcDrain (2 samples, 0.20%)</title><rect x="729.2" y="277" width="2.4" height="15.0" fill="rgb(251,229,43)" rx="2" ry="2" />
<text  x="732.25" y="287.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).SetWriteDeadline (1 samples, 0.10%)</title><rect x="151.2" y="309" width="1.2" height="15.0" fill="rgb(236,24,29)" rx="2" ry="2" />
<text  x="154.22" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.10%)</title><rect x="731.6" y="245" width="1.2" height="15.0" fill="rgb(224,194,10)" rx="2" ry="2" />
<text  x="734.64" y="255.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (1 samples, 0.10%)</title><rect x="156.0" y="245" width="1.2" height="15.0" fill="rgb(244,59,11)" rx="2" ry="2" />
<text  x="159.00" y="255.5" ></text>
</g>
<g >
<title>runtime.usleep (3 samples, 0.30%)</title><rect x="1111.0" y="245" width="3.6" height="15.0" fill="rgb(220,169,18)" rx="2" ry="2" />
<text  x="1114.01" y="255.5" ></text>
</g>
<g >
<title>bytes.(*asciiSet).contains (1 samples, 0.10%)</title><rect x="159.6" y="261" width="1.2" height="15.0" fill="rgb(227,203,53)" rx="2" ry="2" />
<text  x="162.59" y="271.5" ></text>
</g>
<g >
<title>internal/poll.setDeadlineImpl (1 samples, 0.10%)</title><rect x="151.2" y="293" width="1.2" height="15.0" fill="rgb(225,198,49)" rx="2" ry="2" />
<text  x="154.22" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (1 samples, 0.10%)</title><rect x="455.2" y="53" width="1.2" height="15.0" fill="rgb(233,58,49)" rx="2" ry="2" />
<text  x="458.19" y="63.5" ></text>
</g>
<g >
<title>runtime.startm (28 samples, 2.84%)</title><rect x="1114.6" y="245" width="33.5" height="15.0" fill="rgb(209,64,37)" rx="2" ry="2" />
<text  x="1117.60" y="255.5" >ru..</text>
</g>
<g >
<title>runtime.bgsweep (1 samples, 0.10%)</title><rect x="728.1" y="325" width="1.1" height="15.0" fill="rgb(210,173,52)" rx="2" ry="2" />
<text  x="731.05" y="335.5" ></text>
</g>
<g >
<title>runtime.pidlegetSpinning (1 samples, 0.10%)</title><rect x="735.2" y="245" width="1.2" height="15.0" fill="rgb(231,204,19)" rx="2" ry="2" />
<text  x="738.23" y="255.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.10%)</title><rect x="732.8" y="261" width="1.2" height="15.0" fill="rgb(246,215,48)" rx="2" ry="2" />
<text  x="735.84" y="271.5" ></text>
</g>
<g >
<title>os.hostname (163 samples, 16.53%)</title><rect x="470.8" y="229" width="195.0" height="15.0" fill="rgb(234,129,26)" rx="2" ry="2" />
<text  x="473.75" y="239.5" >os.hostname</text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.10%)</title><rect x="1148.1" y="197" width="1.2" height="15.0" fill="rgb(247,52,49)" rx="2" ry="2" />
<text  x="1151.11" y="207.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.10%)</title><rect x="1152.9" y="245" width="1.2" height="15.0" fill="rgb(251,28,43)" rx="2" ry="2" />
<text  x="1155.90" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (28 samples, 2.84%)</title><rect x="1114.6" y="213" width="33.5" height="15.0" fill="rgb(214,165,33)" rx="2" ry="2" />
<text  x="1117.60" y="223.5" >ru..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="466.0" y="197" width="1.2" height="15.0" fill="rgb(238,17,22)" rx="2" ry="2" />
<text  x="468.96" y="207.5" ></text>
</g>
<g >
<title>sync.(*Pool).getSlow (1 samples, 0.10%)</title><rect x="468.4" y="133" width="1.2" height="15.0" fill="rgb(254,31,30)" rx="2" ry="2" />
<text  x="471.36" y="143.5" ></text>
</g>
<g >
<title>syscall.syscall (115 samples, 11.66%)</title><rect x="11.2" y="197" width="137.6" height="15.0" fill="rgb(234,76,45)" rx="2" ry="2" />
<text  x="14.20" y="207.5" >syscall.syscall</text>
</g>
<g >
<title>time.Now (1 samples, 0.10%)</title><rect x="665.8" y="245" width="1.2" height="15.0" fill="rgb(209,161,36)" rx="2" ry="2" />
<text  x="668.82" y="255.5" ></text>
</g>
<g >
<title>time.now (1 samples, 0.10%)</title><rect x="665.8" y="229" width="1.2" height="15.0" fill="rgb(245,215,14)" rx="2" ry="2" />
<text  x="668.82" y="239.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwlock (2 samples, 0.20%)</title><rect x="322.4" y="181" width="2.3" height="15.0" fill="rgb(247,203,26)" rx="2" ry="2" />
<text  x="325.35" y="191.5" ></text>
</g>
<g >
<title>fmt.(*pp).doPrintf (5 samples, 0.51%)</title><rect x="312.8" y="213" width="6.0" height="15.0" fill="rgb(207,170,14)" rx="2" ry="2" />
<text  x="315.78" y="223.5" ></text>
</g>
<g >
<title>runtime.madvise (1 samples, 0.10%)</title><rect x="1156.5" y="277" width="1.2" height="15.0" fill="rgb(249,161,27)" rx="2" ry="2" />
<text  x="1159.49" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.20%)</title><rect x="172.8" y="277" width="2.4" height="15.0" fill="rgb(222,83,14)" rx="2" ry="2" />
<text  x="175.76" y="287.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.10%)</title><rect x="168.0" y="277" width="1.2" height="15.0" fill="rgb(234,9,7)" rx="2" ry="2" />
<text  x="170.97" y="287.5" ></text>
</g>
<g >
<title>net/http.(*conn).serve (550 samples, 55.78%)</title><rect x="10.0" y="325" width="658.2" height="15.0" fill="rgb(205,133,29)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >net/http.(*conn).serve</text>
</g>
<g >
<title>runtime.lock2 (1 samples, 0.10%)</title><rect x="1173.2" y="293" width="1.2" height="15.0" fill="rgb(250,149,0)" rx="2" ry="2" />
<text  x="1176.25" y="303.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.10%)</title><rect x="455.2" y="101" width="1.2" height="15.0" fill="rgb(239,204,20)" rx="2" ry="2" />
<text  x="458.19" y="111.5" ></text>
</g>
<g >
<title>regexp.freeBitState (1 samples, 0.10%)</title><rect x="457.6" y="149" width="1.2" height="15.0" fill="rgb(236,71,51)" rx="2" ry="2" />
<text  x="460.59" y="159.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.10%)</title><rect x="150.0" y="277" width="1.2" height="15.0" fill="rgb(237,214,30)" rx="2" ry="2" />
<text  x="153.02" y="287.5" ></text>
</g>
<g >
<title>runtime.greyobject (1 samples, 0.10%)</title><rect x="730.4" y="213" width="1.2" height="15.0" fill="rgb(245,106,28)" rx="2" ry="2" />
<text  x="733.45" y="223.5" ></text>
</g>
<g >
<title>runtime.assertE2I2 (1 samples, 0.10%)</title><rect x="315.2" y="165" width="1.2" height="15.0" fill="rgb(207,55,53)" rx="2" ry="2" />
<text  x="318.17" y="175.5" ></text>
</g>
<g >
<title>internal/poll.runtime_pollWait (1 samples, 0.10%)</title><rect x="10.0" y="197" width="1.2" height="15.0" fill="rgb(241,47,20)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>runtime.mapassign (1 samples, 0.10%)</title><rect x="152.4" y="245" width="1.2" height="15.0" fill="rgb(207,16,36)" rx="2" ry="2" />
<text  x="155.41" y="255.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="164.4" y="261" width="1.2" height="15.0" fill="rgb(214,224,30)" rx="2" ry="2" />
<text  x="167.38" y="271.5" ></text>
</g>
<g >
<title>time.Now (1 samples, 0.10%)</title><rect x="168.0" y="293" width="1.2" height="15.0" fill="rgb(213,141,48)" rx="2" ry="2" />
<text  x="170.97" y="303.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.10%)</title><rect x="1151.7" y="229" width="1.2" height="15.0" fill="rgb(248,223,38)" rx="2" ry="2" />
<text  x="1154.70" y="239.5" ></text>
</g>
<g >
<title>runtime.pidlegetSpinning (1 samples, 0.10%)</title><rect x="174.0" y="229" width="1.2" height="15.0" fill="rgb(253,174,53)" rx="2" ry="2" />
<text  x="176.96" y="239.5" ></text>
</g>
<g >
<title>runtime.gcWriteBarrierR9 (1 samples, 0.10%)</title><rect x="454.0" y="213" width="1.2" height="15.0" fill="rgb(225,20,37)" rx="2" ry="2" />
<text  x="457.00" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (5 samples, 0.51%)</title><rect x="1167.3" y="213" width="5.9" height="15.0" fill="rgb(249,116,23)" rx="2" ry="2" />
<text  x="1170.26" y="223.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.20%)</title><rect x="1174.4" y="277" width="2.4" height="15.0" fill="rgb(243,112,35)" rx="2" ry="2" />
<text  x="1177.44" y="287.5" ></text>
</g>
<g >
<title>runtime.madvise (1 samples, 0.10%)</title><rect x="1157.7" y="277" width="1.2" height="15.0" fill="rgb(245,183,10)" rx="2" ry="2" />
<text  x="1160.69" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (1 samples, 0.10%)</title><rect x="1146.9" y="197" width="1.2" height="15.0" fill="rgb(249,210,42)" rx="2" ry="2" />
<text  x="1149.92" y="207.5" ></text>
</g>
<g >
<title>net/http.(*conn).readRequest (14 samples, 1.42%)</title><rect x="152.4" y="309" width="16.8" height="15.0" fill="rgb(225,13,31)" rx="2" ry="2" />
<text  x="155.41" y="319.5" ></text>
</g>
<g >
<title>runtime.resetspinning (28 samples, 2.84%)</title><rect x="1114.6" y="277" width="33.5" height="15.0" fill="rgb(205,205,2)" rx="2" ry="2" />
<text  x="1117.60" y="287.5" >ru..</text>
</g>
<g >
<title>syscall.syscall6 (127 samples, 12.88%)</title><rect x="471.9" y="165" width="152.0" height="15.0" fill="rgb(213,53,50)" rx="2" ry="2" />
<text  x="474.95" y="175.5" >syscall.syscall6</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="166.8" y="277" width="1.2" height="15.0" fill="rgb(238,24,45)" rx="2" ry="2" />
<text  x="169.77" y="287.5" ></text>
</g>
<g >
<title>regexp.(*Regexp).replaceAll (5 samples, 0.51%)</title><rect x="456.4" y="197" width="6.0" height="15.0" fill="rgb(211,15,8)" rx="2" ry="2" />
<text  x="459.39" y="207.5" ></text>
</g>
<g >
<title>memeqbody (1 samples, 0.10%)</title><rect x="451.6" y="149" width="1.2" height="15.0" fill="rgb(220,166,25)" rx="2" ry="2" />
<text  x="454.60" y="159.5" ></text>
</g>
<g >
<title>net/http.(*connReader).startBackgroundRead (3 samples, 0.30%)</title><rect x="171.6" y="309" width="3.6" height="15.0" fill="rgb(237,67,28)" rx="2" ry="2" />
<text  x="174.56" y="319.5" ></text>
</g>
<g >
<title>runtime.systemstack (28 samples, 2.84%)</title><rect x="1156.5" y="325" width="33.5" height="15.0" fill="rgb(240,40,25)" rx="2" ry="2" />
<text  x="1159.49" y="335.5" >ru..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="156.0" y="261" width="1.2" height="15.0" fill="rgb(218,172,0)" rx="2" ry="2" />
<text  x="159.00" y="271.5" ></text>
</g>
<g >
<title>runtime.makeslice (1 samples, 0.10%)</title><rect x="162.0" y="261" width="1.2" height="15.0" fill="rgb(224,181,40)" rx="2" ry="2" />
<text  x="164.99" y="271.5" ></text>
</g>
<g >
<title>fmt.(*pp).free (1 samples, 0.10%)</title><rect x="318.8" y="213" width="1.2" height="15.0" fill="rgb(240,227,18)" rx="2" ry="2" />
<text  x="321.76" y="223.5" ></text>
</g>
<g >
<title>syscall.write (105 samples, 10.65%)</title><rect x="324.7" y="181" width="125.7" height="15.0" fill="rgb(230,36,29)" rx="2" ry="2" />
<text  x="327.75" y="191.5" >syscall.write</text>
</g>
<g >
<title>runtime.findRunnable (1 samples, 0.10%)</title><rect x="732.8" y="277" width="1.2" height="15.0" fill="rgb(222,49,31)" rx="2" ry="2" />
<text  x="735.84" y="287.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.10%)</title><rect x="171.6" y="293" width="1.2" height="15.0" fill="rgb(236,3,18)" rx="2" ry="2" />
<text  x="174.56" y="303.5" ></text>
</g>
<g >
<title>regexp.(*Regexp).replaceAll (2 samples, 0.20%)</title><rect x="468.4" y="197" width="2.4" height="15.0" fill="rgb(230,224,12)" rx="2" ry="2" />
<text  x="471.36" y="207.5" ></text>
</g>
<g >
<title>runtime.wakep (10 samples, 1.01%)</title><rect x="1176.8" y="293" width="12.0" height="15.0" fill="rgb(250,13,6)" rx="2" ry="2" />
<text  x="1179.84" y="303.5" ></text>
</g>
<g >
<title>runtime.notewakeup (10 samples, 1.01%)</title><rect x="1176.8" y="261" width="12.0" height="15.0" fill="rgb(252,123,53)" rx="2" ry="2" />
<text  x="1179.84" y="271.5" ></text>
</g>
<g >
<title>regexp/syntax.(*Inst).MatchRunePos (1 samples, 0.10%)</title><rect x="458.8" y="133" width="1.2" height="15.0" fill="rgb(249,54,32)" rx="2" ry="2" />
<text  x="461.78" y="143.5" ></text>
</g>
<g >
<title>runtime.osyield (3 samples, 0.30%)</title><rect x="1111.0" y="261" width="3.6" height="15.0" fill="rgb(205,172,31)" rx="2" ry="2" />
<text  x="1114.01" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.10%)</title><rect x="455.2" y="85" width="1.2" height="15.0" fill="rgb(225,197,24)" rx="2" ry="2" />
<text  x="458.19" y="95.5" ></text>
</g>
<g >
<title>runtime.(*randomOrder).start (1 samples, 0.10%)</title><rect x="734.0" y="261" width="1.2" height="15.0" fill="rgb(244,174,26)" rx="2" ry="2" />
<text  x="737.04" y="271.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Peek (116 samples, 11.76%)</title><rect x="10.0" y="309" width="138.8" height="15.0" fill="rgb(226,128,36)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >bufio.(*Reader).P..</text>
</g>
<g >
<title>github.com/varstr/uaparser.searchIn (1 samples, 0.10%)</title><rect x="451.6" y="197" width="1.2" height="15.0" fill="rgb(222,20,46)" rx="2" ry="2" />
<text  x="454.60" y="207.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.10%)</title><rect x="156.0" y="165" width="1.2" height="15.0" fill="rgb(233,46,36)" rx="2" ry="2" />
<text  x="159.00" y="175.5" ></text>
</g>
<g >
<title>syscall.sysctl (35 samples, 3.55%)</title><rect x="623.9" y="197" width="41.9" height="15.0" fill="rgb(232,176,47)" rx="2" ry="2" />
<text  x="626.94" y="207.5" >sys..</text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/stats.clean (2 samples, 0.20%)</title><rect x="468.4" y="229" width="2.4" height="15.0" fill="rgb(206,59,25)" rx="2" ry="2" />
<text  x="471.36" y="239.5" ></text>
</g>
<g >
<title>time.Since (1 samples, 0.10%)</title><rect x="667.0" y="245" width="1.2" height="15.0" fill="rgb(219,52,29)" rx="2" ry="2" />
<text  x="670.02" y="255.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.10%)</title><rect x="323.5" y="149" width="1.2" height="15.0" fill="rgb(249,213,14)" rx="2" ry="2" />
<text  x="326.55" y="159.5" ></text>
</g>
<g >
<title>runtime.pthread_kill (3 samples, 0.30%)</title><rect x="1163.7" y="229" width="3.6" height="15.0" fill="rgb(211,200,0)" rx="2" ry="2" />
<text  x="1166.67" y="239.5" ></text>
</g>
<g >
<title>net/http.checkConnErrorWriter.Write (110 samples, 11.16%)</title><rect x="177.5" y="277" width="131.7" height="15.0" fill="rgb(222,91,10)" rx="2" ry="2" />
<text  x="180.55" y="287.5" >net/http.checkCo..</text>
</g>
<g >
<title>strings.Index (1 samples, 0.10%)</title><rect x="451.6" y="165" width="1.2" height="15.0" fill="rgb(247,80,37)" rx="2" ry="2" />
<text  x="454.60" y="175.5" ></text>
</g>
<g >
<title>runtime.newproc.func1 (10 samples, 1.01%)</title><rect x="1176.8" y="309" width="12.0" height="15.0" fill="rgb(219,128,32)" rx="2" ry="2" />
<text  x="1179.84" y="319.5" ></text>
</g>
<g >
<title>runtime.acquirem (1 samples, 0.10%)</title><rect x="154.8" y="229" width="1.2" height="15.0" fill="rgb(247,142,51)" rx="2" ry="2" />
<text  x="157.81" y="239.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.10%)</title><rect x="154.8" y="245" width="1.2" height="15.0" fill="rgb(245,225,27)" rx="2" ry="2" />
<text  x="157.81" y="255.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.10%)</title><rect x="466.0" y="181" width="1.2" height="15.0" fill="rgb(223,88,39)" rx="2" ry="2" />
<text  x="468.96" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.10%)</title><rect x="455.2" y="133" width="1.2" height="15.0" fill="rgb(230,212,3)" rx="2" ry="2" />
<text  x="458.19" y="143.5" ></text>
</g>
<g >
<title>runtime.growslice (2 samples, 0.20%)</title><rect x="466.0" y="213" width="2.4" height="15.0" fill="rgb(215,102,3)" rx="2" ry="2" />
<text  x="468.96" y="223.5" ></text>
</g>
<g >
<title>bufio.(*Reader).fill (116 samples, 11.76%)</title><rect x="10.0" y="293" width="138.8" height="15.0" fill="rgb(253,109,20)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >bufio.(*Reader).f..</text>
</g>
<g >
<title>runtime.lockWithRank (3 samples, 0.30%)</title><rect x="1173.2" y="309" width="3.6" height="15.0" fill="rgb(205,9,43)" rx="2" ry="2" />
<text  x="1176.25" y="319.5" ></text>
</g>
<g >
<title>net/http.(*connReader).backgroundRead (50 samples, 5.07%)</title><rect x="668.2" y="325" width="59.9" height="15.0" fill="rgb(239,31,50)" rx="2" ry="2" />
<text  x="671.22" y="335.5" >net/ht..</text>
</g>
<g >
<title>regexp.(*Regexp).ReplaceAllString (7 samples, 0.71%)</title><rect x="456.4" y="213" width="8.4" height="15.0" fill="rgb(237,31,46)" rx="2" ry="2" />
<text  x="459.39" y="223.5" ></text>
</g>
</g>
</svg>
