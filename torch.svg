<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="374.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="357" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="357" > </text>
<g id="frames">
<g >
<title>runtime.netpoll (1 samples, 0.10%)</title><rect x="736.2" y="245" width="1.1" height="15.0" fill="rgb(251,100,20)" rx="2" ry="2" />
<text  x="739.15" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (22 samples, 2.12%)</title><rect x="1123.1" y="197" width="24.9" height="15.0" fill="rgb(250,178,36)" rx="2" ry="2" />
<text  x="1126.06" y="207.5" >r..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="324.3" y="117" width="1.1" height="15.0" fill="rgb(209,150,21)" rx="2" ry="2" />
<text  x="327.29" y="127.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.10%)</title><rect x="740.7" y="181" width="1.1" height="15.0" fill="rgb(218,106,20)" rx="2" ry="2" />
<text  x="743.69" y="191.5" ></text>
</g>
<g >
<title>net/textproto.canonicalMIMEHeaderKey (1 samples, 0.10%)</title><rect x="160.9" y="245" width="1.1" height="15.0" fill="rgb(224,93,31)" rx="2" ry="2" />
<text  x="163.90" y="255.5" ></text>
</g>
<g >
<title>runtime.makemap_small (1 samples, 0.10%)</title><rect x="454.8" y="213" width="1.1" height="15.0" fill="rgb(244,41,2)" rx="2" ry="2" />
<text  x="457.77" y="223.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.10%)</title><rect x="731.6" y="229" width="1.2" height="15.0" fill="rgb(229,65,1)" rx="2" ry="2" />
<text  x="734.62" y="239.5" ></text>
</g>
<g >
<title>runtime.sysUnusedOS (3 samples, 0.29%)</title><rect x="1158.2" y="277" width="3.4" height="15.0" fill="rgb(219,197,13)" rx="2" ry="2" />
<text  x="1161.23" y="287.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).writeUnlock (1 samples, 0.10%)</title><rect x="328.8" y="165" width="1.2" height="15.0" fill="rgb(251,7,36)" rx="2" ry="2" />
<text  x="331.83" y="175.5" ></text>
</g>
<g >
<title>net/http.(*connReader).Read (123 samples, 11.83%)</title><rect x="11.1" y="261" width="139.6" height="15.0" fill="rgb(225,35,53)" rx="2" ry="2" />
<text  x="14.13" y="271.5" >net/http.(*connRe..</text>
</g>
<g >
<title>syscall.Read (32 samples, 3.08%)</title><rect x="690.8" y="261" width="36.3" height="15.0" fill="rgb(241,186,43)" rx="2" ry="2" />
<text  x="693.77" y="271.5" >sys..</text>
</g>
<g >
<title>runtime.semawakeup (18 samples, 1.73%)</title><rect x="741.8" y="181" width="20.4" height="15.0" fill="rgb(239,6,9)" rx="2" ry="2" />
<text  x="744.83" y="191.5" ></text>
</g>
<g >
<title>github.com/varstr/uaparser.Parse (2 samples, 0.19%)</title><rect x="452.5" y="197" width="2.3" height="15.0" fill="rgb(246,40,25)" rx="2" ry="2" />
<text  x="455.50" y="207.5" ></text>
</g>
<g >
<title>runtime.makemap_small (1 samples, 0.10%)</title><rect x="165.4" y="277" width="1.2" height="15.0" fill="rgb(221,101,52)" rx="2" ry="2" />
<text  x="168.44" y="287.5" ></text>
</g>
<g >
<title>runtime.wakep (4 samples, 0.38%)</title><rect x="1170.7" y="261" width="4.5" height="15.0" fill="rgb(240,195,17)" rx="2" ry="2" />
<text  x="1173.71" y="271.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (2 samples, 0.19%)</title><rect x="1151.4" y="261" width="2.3" height="15.0" fill="rgb(207,114,32)" rx="2" ry="2" />
<text  x="1154.42" y="271.5" ></text>
</g>
<g >
<title>net/textproto.(*Reader).upcomingHeaderKeys (1 samples, 0.10%)</title><rect x="159.8" y="245" width="1.1" height="15.0" fill="rgb(211,77,38)" rx="2" ry="2" />
<text  x="162.77" y="255.5" ></text>
</g>
<g >
<title>os.hostname (201 samples, 19.33%)</title><rect x="460.4" y="213" width="228.1" height="15.0" fill="rgb(205,124,4)" rx="2" ry="2" />
<text  x="463.44" y="223.5" >os.hostname</text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/stats.RecordTimer (2 samples, 0.19%)</title><rect x="458.2" y="229" width="2.2" height="15.0" fill="rgb(225,165,40)" rx="2" ry="2" />
<text  x="461.17" y="239.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (6 samples, 0.58%)</title><rect x="729.3" y="277" width="6.9" height="15.0" fill="rgb(214,112,33)" rx="2" ry="2" />
<text  x="732.35" y="287.5" ></text>
</g>
<g >
<title>net/textproto.readMIMEHeader (5 samples, 0.48%)</title><rect x="159.8" y="261" width="5.6" height="15.0" fill="rgb(233,187,0)" rx="2" ry="2" />
<text  x="162.77" y="271.5" ></text>
</g>
<g >
<title>net/textproto.(*Reader).ReadMIMEHeader (5 samples, 0.48%)</title><rect x="159.8" y="277" width="5.6" height="15.0" fill="rgb(245,78,14)" rx="2" ry="2" />
<text  x="162.77" y="287.5" ></text>
</g>
<g >
<title>syscall.syscall (121 samples, 11.63%)</title><rect x="13.4" y="181" width="137.3" height="15.0" fill="rgb(236,108,1)" rx="2" ry="2" />
<text  x="16.40" y="191.5" >syscall.syscall</text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/handlers.getStatsTags (4 samples, 0.38%)</title><rect x="452.5" y="229" width="4.5" height="15.0" fill="rgb(237,72,3)" rx="2" ry="2" />
<text  x="455.50" y="239.5" ></text>
</g>
<g >
<title>syscall.syscall (32 samples, 3.08%)</title><rect x="690.8" y="229" width="36.3" height="15.0" fill="rgb(245,30,50)" rx="2" ry="2" />
<text  x="693.77" y="239.5" >sys..</text>
</g>
<g >
<title>net/http.serverHandler.ServeHTTP (326 samples, 31.35%)</title><rect x="319.8" y="293" width="369.8" height="15.0" fill="rgb(232,34,47)" rx="2" ry="2" />
<text  x="322.75" y="303.5" >net/http.serverHandler.ServeHTTP</text>
</g>
<g >
<title>runtime.gopreempt_m (4 samples, 0.38%)</title><rect x="1149.2" y="277" width="4.5" height="15.0" fill="rgb(239,160,21)" rx="2" ry="2" />
<text  x="1152.15" y="287.5" ></text>
</g>
<g >
<title>indexbytebody (1 samples, 0.10%)</title><rect x="159.8" y="197" width="1.1" height="15.0" fill="rgb(210,27,18)" rx="2" ry="2" />
<text  x="162.77" y="207.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="727.1" y="261" width="1.1" height="15.0" fill="rgb(245,119,50)" rx="2" ry="2" />
<text  x="730.08" y="271.5" ></text>
</g>
<g >
<title>aeshashbody (1 samples, 0.10%)</title><rect x="156.4" y="213" width="1.1" height="15.0" fill="rgb(223,134,7)" rx="2" ry="2" />
<text  x="159.37" y="223.5" ></text>
</g>
<g >
<title>runtime.newproc.func1 (10 samples, 0.96%)</title><rect x="1177.5" y="293" width="11.4" height="15.0" fill="rgb(248,29,27)" rx="2" ry="2" />
<text  x="1180.52" y="303.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.10%)</title><rect x="740.7" y="197" width="1.1" height="15.0" fill="rgb(208,188,22)" rx="2" ry="2" />
<text  x="743.69" y="207.5" ></text>
</g>
<g >
<title>fmt.(*pp).free (1 samples, 0.10%)</title><rect x="451.4" y="197" width="1.1" height="15.0" fill="rgb(252,174,19)" rx="2" ry="2" />
<text  x="454.37" y="207.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (2 samples, 0.19%)</title><rect x="1175.2" y="293" width="2.3" height="15.0" fill="rgb(230,226,28)" rx="2" ry="2" />
<text  x="1178.25" y="303.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (6 samples, 0.58%)</title><rect x="1162.8" y="245" width="6.8" height="15.0" fill="rgb(253,64,30)" rx="2" ry="2" />
<text  x="1165.77" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (31 samples, 2.98%)</title><rect x="1153.7" y="309" width="35.2" height="15.0" fill="rgb(249,44,37)" rx="2" ry="2" />
<text  x="1156.69" y="319.5" >ru..</text>
</g>
<g >
<title>runtime.findRunnable (336 samples, 32.31%)</title><rect x="737.3" y="261" width="381.2" height="15.0" fill="rgb(205,67,23)" rx="2" ry="2" />
<text  x="740.29" y="271.5" >runtime.findRunnable</text>
</g>
<g >
<title>os.Hostname (201 samples, 19.33%)</title><rect x="460.4" y="229" width="228.1" height="15.0" fill="rgb(230,0,46)" rx="2" ry="2" />
<text  x="463.44" y="239.5" >os.Hostname</text>
</g>
<g >
<title>runtime.assertI2I2 (1 samples, 0.10%)</title><rect x="175.7" y="213" width="1.1" height="15.0" fill="rgb(249,219,24)" rx="2" ry="2" />
<text  x="178.65" y="223.5" ></text>
</g>
<g >
<title>time.now (1 samples, 0.10%)</title><rect x="173.4" y="213" width="1.1" height="15.0" fill="rgb(211,59,48)" rx="2" ry="2" />
<text  x="176.38" y="223.5" ></text>
</g>
<g >
<title>runtime.startm (10 samples, 0.96%)</title><rect x="1177.5" y="261" width="11.4" height="15.0" fill="rgb(226,109,33)" rx="2" ry="2" />
<text  x="1180.52" y="271.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).SetReadDeadline (1 samples, 0.10%)</title><rect x="154.1" y="277" width="1.1" height="15.0" fill="rgb(225,46,38)" rx="2" ry="2" />
<text  x="157.10" y="287.5" ></text>
</g>
<g >
<title>runtime.unlockWithRank (1 samples, 0.10%)</title><rect x="1117.4" y="245" width="1.1" height="15.0" fill="rgb(224,52,22)" rx="2" ry="2" />
<text  x="1120.38" y="255.5" ></text>
</g>
<g >
<title>time.Now (1 samples, 0.10%)</title><rect x="167.7" y="277" width="1.1" height="15.0" fill="rgb(208,141,53)" rx="2" ry="2" />
<text  x="170.71" y="287.5" ></text>
</g>
<g >
<title>runtime.mapiternext (1 samples, 0.10%)</title><rect x="166.6" y="261" width="1.1" height="15.0" fill="rgb(207,152,47)" rx="2" ry="2" />
<text  x="169.58" y="271.5" ></text>
</g>
<g >
<title>net/http.(*response).finishRequest (130 samples, 12.50%)</title><rect x="172.2" y="293" width="147.6" height="15.0" fill="rgb(221,183,17)" rx="2" ry="2" />
<text  x="175.25" y="303.5" >net/http.(*respons..</text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/handlers.WithStats.func1 (324 samples, 31.15%)</title><rect x="322.0" y="245" width="367.6" height="15.0" fill="rgb(246,136,2)" rx="2" ry="2" />
<text  x="325.02" y="255.5" >github.com/vivekprm/go-pprof-demo/handlers.WithSt..</text>
</g>
<g >
<title>runtime.mapiterinit (1 samples, 0.10%)</title><rect x="150.7" y="261" width="1.1" height="15.0" fill="rgb(252,186,50)" rx="2" ry="2" />
<text  x="153.69" y="271.5" ></text>
</g>
<g >
<title>runtime.semrelease1 (1 samples, 0.10%)</title><rect x="328.8" y="117" width="1.2" height="15.0" fill="rgb(211,4,31)" rx="2" ry="2" />
<text  x="331.83" y="127.5" ></text>
</g>
<g >
<title>fmt.(*pp).doPrintf (3 samples, 0.29%)</title><rect x="322.0" y="197" width="3.4" height="15.0" fill="rgb(246,101,15)" rx="2" ry="2" />
<text  x="325.02" y="207.5" ></text>
</g>
<g >
<title>net/http.(*chunkWriter).writeHeader (2 samples, 0.19%)</title><rect x="172.2" y="245" width="2.3" height="15.0" fill="rgb(233,181,4)" rx="2" ry="2" />
<text  x="175.25" y="255.5" ></text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.10%)</title><rect x="1149.2" y="181" width="1.1" height="15.0" fill="rgb(224,39,43)" rx="2" ry="2" />
<text  x="1152.15" y="191.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.10%)</title><rect x="168.8" y="277" width="1.2" height="15.0" fill="rgb(230,39,21)" rx="2" ry="2" />
<text  x="171.85" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.29%)</title><rect x="448.0" y="101" width="3.4" height="15.0" fill="rgb(210,197,39)" rx="2" ry="2" />
<text  x="450.96" y="111.5" ></text>
</g>
<g >
<title>fmt.(*pp).printArg (1 samples, 0.10%)</title><rect x="324.3" y="181" width="1.1" height="15.0" fill="rgb(221,176,3)" rx="2" ry="2" />
<text  x="327.29" y="191.5" ></text>
</g>
<g >
<title>syscall.Write (126 samples, 12.12%)</title><rect x="176.8" y="213" width="143.0" height="15.0" fill="rgb(253,49,6)" rx="2" ry="2" />
<text  x="179.79" y="223.5" >syscall.Write</text>
</g>
<g >
<title>net/http.appendTime (1 samples, 0.10%)</title><rect x="172.2" y="229" width="1.2" height="15.0" fill="rgb(242,220,43)" rx="2" ry="2" />
<text  x="175.25" y="239.5" ></text>
</g>
<g >
<title>runtime.sysUsedOS (1 samples, 0.10%)</title><rect x="1161.6" y="165" width="1.2" height="15.0" fill="rgb(221,219,29)" rx="2" ry="2" />
<text  x="1164.63" y="175.5" ></text>
</g>
<g >
<title>runtime.(*itabTableType).find (1 samples, 0.10%)</title><rect x="175.7" y="181" width="1.1" height="15.0" fill="rgb(225,96,53)" rx="2" ry="2" />
<text  x="178.65" y="191.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.10%)</title><rect x="450.2" y="69" width="1.2" height="15.0" fill="rgb(239,186,46)" rx="2" ry="2" />
<text  x="453.23" y="79.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.10%)</title><rect x="1169.6" y="229" width="1.1" height="15.0" fill="rgb(227,49,38)" rx="2" ry="2" />
<text  x="1172.58" y="239.5" ></text>
</g>
<g >
<title>runtime.getempty.func1 (1 samples, 0.10%)</title><rect x="1161.6" y="197" width="1.2" height="15.0" fill="rgb(243,173,17)" rx="2" ry="2" />
<text  x="1164.63" y="207.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (2 samples, 0.19%)</title><rect x="1149.2" y="261" width="2.2" height="15.0" fill="rgb(212,138,15)" rx="2" ry="2" />
<text  x="1152.15" y="271.5" ></text>
</g>
<g >
<title>runtime.ready (4 samples, 0.38%)</title><rect x="1170.7" y="277" width="4.5" height="15.0" fill="rgb(253,157,3)" rx="2" ry="2" />
<text  x="1173.71" y="287.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (1 samples, 0.10%)</title><rect x="1120.8" y="245" width="1.1" height="15.0" fill="rgb(242,70,48)" rx="2" ry="2" />
<text  x="1123.79" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.10%)</title><rect x="1146.9" y="181" width="1.1" height="15.0" fill="rgb(245,66,21)" rx="2" ry="2" />
<text  x="1149.88" y="191.5" ></text>
</g>
<g >
<title>runtime.getempty (1 samples, 0.10%)</title><rect x="1161.6" y="213" width="1.2" height="15.0" fill="rgb(237,142,8)" rx="2" ry="2" />
<text  x="1164.63" y="223.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1.1 (1 samples, 0.10%)</title><rect x="449.1" y="69" width="1.1" height="15.0" fill="rgb(244,134,7)" rx="2" ry="2" />
<text  x="452.10" y="79.5" ></text>
</g>
<g >
<title>fmt.Fprintln (1 samples, 0.10%)</title><rect x="451.4" y="213" width="1.1" height="15.0" fill="rgb(239,21,27)" rx="2" ry="2" />
<text  x="454.37" y="223.5" ></text>
</g>
<g >
<title>runtime.gcstopm (1 samples, 0.10%)</title><rect x="740.7" y="245" width="1.1" height="15.0" fill="rgb(210,201,36)" rx="2" ry="2" />
<text  x="743.69" y="255.5" ></text>
</g>
<g >
<title>syscall.write (107 samples, 10.29%)</title><rect x="330.0" y="165" width="121.4" height="15.0" fill="rgb(213,115,37)" rx="2" ry="2" />
<text  x="332.96" y="175.5" >syscall.write</text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.10%)</title><rect x="1061.8" y="229" width="1.1" height="15.0" fill="rgb(219,168,11)" rx="2" ry="2" />
<text  x="1064.79" y="239.5" ></text>
</g>
<g >
<title>net/http.(*conn).readRequest (14 samples, 1.35%)</title><rect x="151.8" y="293" width="15.9" height="15.0" fill="rgb(238,202,16)" rx="2" ry="2" />
<text  x="154.83" y="303.5" ></text>
</g>
<g >
<title>context.WithCancel (2 samples, 0.19%)</title><rect x="151.8" y="277" width="2.3" height="15.0" fill="rgb(218,23,18)" rx="2" ry="2" />
<text  x="154.83" y="287.5" ></text>
</g>
<g >
<title>runtime.notewakeup (22 samples, 2.12%)</title><rect x="1123.1" y="213" width="24.9" height="15.0" fill="rgb(246,71,18)" rx="2" ry="2" />
<text  x="1126.06" y="223.5" >r..</text>
</g>
<g >
<title>bufio.(*Reader).ReadLine (1 samples, 0.10%)</title><rect x="158.6" y="245" width="1.2" height="15.0" fill="rgb(244,218,16)" rx="2" ry="2" />
<text  x="161.63" y="255.5" ></text>
</g>
<g >
<title>runtime.gcWriteBarrier (1 samples, 0.10%)</title><rect x="453.6" y="181" width="1.2" height="15.0" fill="rgb(218,33,51)" rx="2" ry="2" />
<text  x="456.63" y="191.5" ></text>
</g>
<g >
<title>runtime.runqsteal (48 samples, 4.62%)</title><rect x="1062.9" y="229" width="54.5" height="15.0" fill="rgb(251,222,46)" rx="2" ry="2" />
<text  x="1065.92" y="239.5" >runti..</text>
</g>
<g >
<title>runtime.runqgrab (48 samples, 4.62%)</title><rect x="1062.9" y="213" width="54.5" height="15.0" fill="rgb(233,30,23)" rx="2" ry="2" />
<text  x="1065.92" y="223.5" >runti..</text>
</g>
<g >
<title>sync.(*Once).Do (1 samples, 0.10%)</title><rect x="164.3" y="245" width="1.1" height="15.0" fill="rgb(228,35,34)" rx="2" ry="2" />
<text  x="167.31" y="255.5" ></text>
</g>
<g >
<title>runtime.mPark (85 samples, 8.17%)</title><rect x="763.4" y="245" width="96.4" height="15.0" fill="rgb(221,1,3)" rx="2" ry="2" />
<text  x="766.38" y="255.5" >runtime.mPark</text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.10%)</title><rect x="1150.3" y="213" width="1.1" height="15.0" fill="rgb(235,214,10)" rx="2" ry="2" />
<text  x="1153.29" y="223.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (126 samples, 12.12%)</title><rect x="176.8" y="229" width="143.0" height="15.0" fill="rgb(226,136,23)" rx="2" ry="2" />
<text  x="179.79" y="239.5" >net.(*netFD).Write</text>
</g>
<g >
<title>runtime.exitsyscall0 (1 samples, 0.10%)</title><rect x="736.2" y="293" width="1.1" height="15.0" fill="rgb(206,215,43)" rx="2" ry="2" />
<text  x="739.15" y="303.5" ></text>
</g>
<g >
<title>syscall.Read (121 samples, 11.63%)</title><rect x="13.4" y="213" width="137.3" height="15.0" fill="rgb(229,122,35)" rx="2" ry="2" />
<text  x="16.40" y="223.5" >syscall.Read</text>
</g>
<g >
<title>runtime.notewakeup (10 samples, 0.96%)</title><rect x="1177.5" y="245" width="11.4" height="15.0" fill="rgb(231,95,40)" rx="2" ry="2" />
<text  x="1180.52" y="255.5" ></text>
</g>
<g >
<title>runtime.unlock2 (1 samples, 0.10%)</title><rect x="1117.4" y="229" width="1.1" height="15.0" fill="rgb(211,29,33)" rx="2" ry="2" />
<text  x="1120.38" y="239.5" ></text>
</g>
<g >
<title>runtime.morestack (4 samples, 0.38%)</title><rect x="1149.2" y="309" width="4.5" height="15.0" fill="rgb(220,132,15)" rx="2" ry="2" />
<text  x="1152.15" y="319.5" ></text>
</g>
<g >
<title>runtime.scanobject (5 samples, 0.48%)</title><rect x="730.5" y="245" width="5.7" height="15.0" fill="rgb(235,200,1)" rx="2" ry="2" />
<text  x="733.48" y="255.5" ></text>
</g>
<g >
<title>runtime.mcall (364 samples, 35.00%)</title><rect x="736.2" y="309" width="413.0" height="15.0" fill="rgb(214,156,42)" rx="2" ry="2" />
<text  x="739.15" y="319.5" >runtime.mcall</text>
</g>
<g >
<title>fmt.Fprintf (114 samples, 10.96%)</title><rect x="322.0" y="213" width="129.4" height="15.0" fill="rgb(216,109,23)" rx="2" ry="2" />
<text  x="325.02" y="223.5" >fmt.Fprintf</text>
</g>
<g >
<title>syscall.nametomib (159 samples, 15.29%)</title><rect x="460.4" y="181" width="180.4" height="15.0" fill="rgb(240,94,34)" rx="2" ry="2" />
<text  x="463.44" y="191.5" >syscall.nametomib</text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.19%)</title><rect x="1175.2" y="261" width="2.3" height="15.0" fill="rgb(254,165,10)" rx="2" ry="2" />
<text  x="1178.25" y="271.5" ></text>
</g>
<g >
<title>syscall.sysctl (42 samples, 4.04%)</title><rect x="640.8" y="181" width="47.7" height="15.0" fill="rgb(234,124,23)" rx="2" ry="2" />
<text  x="643.85" y="191.5" >sysc..</text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.10%)</title><rect x="457.0" y="197" width="1.2" height="15.0" fill="rgb(241,1,50)" rx="2" ry="2" />
<text  x="460.04" y="207.5" ></text>
</g>
<g >
<title>runtime.kevent (177 samples, 17.02%)</title><rect x="861.0" y="229" width="200.8" height="15.0" fill="rgb(235,145,23)" rx="2" ry="2" />
<text  x="863.96" y="239.5" >runtime.kevent</text>
</g>
<g >
<title>internal/poll.(*FD).Write (3 samples, 0.29%)</title><rect x="326.6" y="181" width="3.4" height="15.0" fill="rgb(211,47,41)" rx="2" ry="2" />
<text  x="329.56" y="191.5" ></text>
</g>
<g >
<title>runtime.newstack (4 samples, 0.38%)</title><rect x="1149.2" y="293" width="4.5" height="15.0" fill="rgb(229,3,32)" rx="2" ry="2" />
<text  x="1152.15" y="303.5" ></text>
</g>
<g >
<title>github.com/varstr/uaparser.contains (1 samples, 0.10%)</title><rect x="452.5" y="165" width="1.1" height="15.0" fill="rgb(210,92,32)" rx="2" ry="2" />
<text  x="455.50" y="175.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.10%)</title><rect x="324.3" y="133" width="1.1" height="15.0" fill="rgb(229,44,50)" rx="2" ry="2" />
<text  x="327.29" y="143.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).tryGet (1 samples, 0.10%)</title><rect x="1161.6" y="245" width="1.2" height="15.0" fill="rgb(217,191,31)" rx="2" ry="2" />
<text  x="1164.63" y="255.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.19%)</title><rect x="1118.5" y="245" width="2.3" height="15.0" fill="rgb(205,123,18)" rx="2" ry="2" />
<text  x="1121.52" y="255.5" ></text>
</g>
<g >
<title>runtime.netpollBreak (1 samples, 0.10%)</title><rect x="728.2" y="245" width="1.1" height="15.0" fill="rgb(215,141,39)" rx="2" ry="2" />
<text  x="731.21" y="255.5" ></text>
</g>
<g >
<title>runtime.walltime (1 samples, 0.10%)</title><rect x="173.4" y="197" width="1.1" height="15.0" fill="rgb(208,109,32)" rx="2" ry="2" />
<text  x="176.38" y="207.5" ></text>
</g>
<g >
<title>aeshashbody (1 samples, 0.10%)</title><rect x="455.9" y="197" width="1.1" height="15.0" fill="rgb(252,35,54)" rx="2" ry="2" />
<text  x="458.90" y="207.5" ></text>
</g>
<g >
<title>runtime.notewakeup (4 samples, 0.38%)</title><rect x="1170.7" y="229" width="4.5" height="15.0" fill="rgb(254,20,45)" rx="2" ry="2" />
<text  x="1173.71" y="239.5" ></text>
</g>
<g >
<title>syscall.read (32 samples, 3.08%)</title><rect x="690.8" y="245" width="36.3" height="15.0" fill="rgb(207,47,54)" rx="2" ry="2" />
<text  x="693.77" y="255.5" >sys..</text>
</g>
<g >
<title>net.(*netFD).Read (32 samples, 3.08%)</title><rect x="690.8" y="277" width="36.3" height="15.0" fill="rgb(250,51,53)" rx="2" ry="2" />
<text  x="693.77" y="287.5" >net..</text>
</g>
<g >
<title>net.(*conn).Write (126 samples, 12.12%)</title><rect x="176.8" y="245" width="143.0" height="15.0" fill="rgb(227,225,16)" rx="2" ry="2" />
<text  x="179.79" y="255.5" >net.(*conn).Write</text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.10%)</title><rect x="153.0" y="261" width="1.1" height="15.0" fill="rgb(210,162,22)" rx="2" ry="2" />
<text  x="155.96" y="271.5" ></text>
</g>
<g >
<title>runtime.usleep (48 samples, 4.62%)</title><rect x="1062.9" y="197" width="54.5" height="15.0" fill="rgb(233,72,29)" rx="2" ry="2" />
<text  x="1065.92" y="207.5" >runti..</text>
</g>
<g >
<title>syscall.sysctl (159 samples, 15.29%)</title><rect x="460.4" y="165" width="180.4" height="15.0" fill="rgb(209,152,22)" rx="2" ry="2" />
<text  x="463.44" y="175.5" >syscall.sysctl</text>
</g>
<g >
<title>runtime.walltime (1 samples, 0.10%)</title><rect x="688.5" y="197" width="1.1" height="15.0" fill="rgb(225,15,2)" rx="2" ry="2" />
<text  x="691.50" y="207.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).init (1 samples, 0.10%)</title><rect x="1161.6" y="229" width="1.2" height="15.0" fill="rgb(247,110,8)" rx="2" ry="2" />
<text  x="1164.63" y="239.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.10%)</title><rect x="762.2" y="213" width="1.2" height="15.0" fill="rgb(243,55,10)" rx="2" ry="2" />
<text  x="765.25" y="223.5" ></text>
</g>
<g >
<title>context.propagateCancel (1 samples, 0.10%)</title><rect x="151.8" y="245" width="1.2" height="15.0" fill="rgb(246,36,49)" rx="2" ry="2" />
<text  x="154.83" y="255.5" ></text>
</g>
<g >
<title>net/http.(*headerSorter).Len (1 samples, 0.10%)</title><rect x="174.5" y="181" width="1.2" height="15.0" fill="rgb(226,40,22)" rx="2" ry="2" />
<text  x="177.52" y="191.5" ></text>
</g>
<g >
<title>runtime.notewakeup (18 samples, 1.73%)</title><rect x="741.8" y="197" width="20.4" height="15.0" fill="rgb(248,53,37)" rx="2" ry="2" />
<text  x="744.83" y="207.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.10%)</title><rect x="729.3" y="213" width="1.2" height="15.0" fill="rgb(208,212,2)" rx="2" ry="2" />
<text  x="732.35" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.10%)</title><rect x="450.2" y="37" width="1.2" height="15.0" fill="rgb(224,209,3)" rx="2" ry="2" />
<text  x="453.23" y="47.5" ></text>
</g>
<g >
<title>runtime.unlockWithRank (1 samples, 0.10%)</title><rect x="1148.0" y="229" width="1.2" height="15.0" fill="rgb(221,109,32)" rx="2" ry="2" />
<text  x="1151.02" y="239.5" ></text>
</g>
<g >
<title>fmt.Printf (114 samples, 10.96%)</title><rect x="322.0" y="229" width="129.4" height="15.0" fill="rgb(251,170,51)" rx="2" ry="2" />
<text  x="325.02" y="239.5" >fmt.Printf</text>
</g>
<g >
<title>runtime.goready.func1 (4 samples, 0.38%)</title><rect x="1170.7" y="293" width="4.5" height="15.0" fill="rgb(209,41,34)" rx="2" ry="2" />
<text  x="1173.71" y="303.5" ></text>
</g>
<g >
<title>syscall.syscall (126 samples, 12.12%)</title><rect x="176.8" y="181" width="143.0" height="15.0" fill="rgb(231,195,26)" rx="2" ry="2" />
<text  x="179.79" y="191.5" >syscall.syscall</text>
</g>
<g >
<title>runtime.wbBufFlush1 (1 samples, 0.10%)</title><rect x="449.1" y="53" width="1.1" height="15.0" fill="rgb(238,208,49)" rx="2" ry="2" />
<text  x="452.10" y="63.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.10%)</title><rect x="448.0" y="53" width="1.1" height="15.0" fill="rgb(230,3,36)" rx="2" ry="2" />
<text  x="450.96" y="63.5" ></text>
</g>
<g >
<title>all (1,040 samples, 100%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(238,36,0)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.10%)</title><rect x="740.7" y="213" width="1.1" height="15.0" fill="rgb(224,38,20)" rx="2" ry="2" />
<text  x="743.69" y="223.5" ></text>
</g>
<g >
<title>runtime.findRunnable (2 samples, 0.19%)</title><rect x="1149.2" y="229" width="2.2" height="15.0" fill="rgb(234,214,43)" rx="2" ry="2" />
<text  x="1152.15" y="239.5" ></text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/stats.addTagsToName (1 samples, 0.10%)</title><rect x="458.2" y="213" width="1.1" height="15.0" fill="rgb(251,135,6)" rx="2" ry="2" />
<text  x="461.17" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="153.0" y="245" width="1.1" height="15.0" fill="rgb(239,11,27)" rx="2" ry="2" />
<text  x="155.96" y="255.5" ></text>
</g>
<g >
<title>bytes.(*Buffer).String (1 samples, 0.10%)</title><rect x="457.0" y="213" width="1.2" height="15.0" fill="rgb(212,46,28)" rx="2" ry="2" />
<text  x="460.04" y="223.5" ></text>
</g>
<g >
<title>runtime.convT64 (1 samples, 0.10%)</title><rect x="459.3" y="213" width="1.1" height="15.0" fill="rgb(219,66,48)" rx="2" ry="2" />
<text  x="462.31" y="223.5" ></text>
</g>
<g >
<title>net/url.ParseRequestURI (1 samples, 0.10%)</title><rect x="157.5" y="261" width="1.1" height="15.0" fill="rgb(244,152,4)" rx="2" ry="2" />
<text  x="160.50" y="271.5" ></text>
</g>
<g >
<title>runtime.startm (4 samples, 0.38%)</title><rect x="1170.7" y="245" width="4.5" height="15.0" fill="rgb(248,30,15)" rx="2" ry="2" />
<text  x="1173.71" y="255.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwunlock (1 samples, 0.10%)</title><rect x="328.8" y="149" width="1.2" height="15.0" fill="rgb(252,124,33)" rx="2" ry="2" />
<text  x="331.83" y="159.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="457.0" y="181" width="1.2" height="15.0" fill="rgb(245,53,16)" rx="2" ry="2" />
<text  x="460.04" y="191.5" ></text>
</g>
<g >
<title>net/http.(*connReader).startBackgroundRead (3 samples, 0.29%)</title><rect x="168.8" y="293" width="3.4" height="15.0" fill="rgb(221,105,41)" rx="2" ry="2" />
<text  x="171.85" y="303.5" ></text>
</g>
<g >
<title>runtime.schedule (363 samples, 34.90%)</title><rect x="737.3" y="277" width="411.9" height="15.0" fill="rgb(213,166,43)" rx="2" ry="2" />
<text  x="740.29" y="287.5" >runtime.schedule</text>
</g>
<g >
<title>github.com/varstr/uaparser.searchIn (1 samples, 0.10%)</title><rect x="452.5" y="181" width="1.1" height="15.0" fill="rgb(222,106,46)" rx="2" ry="2" />
<text  x="455.50" y="191.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.10%)</title><rect x="762.2" y="245" width="1.2" height="15.0" fill="rgb(246,152,30)" rx="2" ry="2" />
<text  x="765.25" y="255.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="459.3" y="197" width="1.1" height="15.0" fill="rgb(234,101,40)" rx="2" ry="2" />
<text  x="462.31" y="207.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func4 (1 samples, 0.10%)</title><rect x="1169.6" y="293" width="1.1" height="15.0" fill="rgb(243,33,44)" rx="2" ry="2" />
<text  x="1172.58" y="303.5" ></text>
</g>
<g >
<title>runtime.write (1 samples, 0.10%)</title><rect x="728.2" y="229" width="1.1" height="15.0" fill="rgb(252,80,13)" rx="2" ry="2" />
<text  x="731.21" y="239.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.10%)</title><rect x="1120.8" y="261" width="1.1" height="15.0" fill="rgb(236,108,47)" rx="2" ry="2" />
<text  x="1123.79" y="271.5" ></text>
</g>
<g >
<title>sort.Sort (1 samples, 0.10%)</title><rect x="174.5" y="197" width="1.2" height="15.0" fill="rgb(241,0,26)" rx="2" ry="2" />
<text  x="177.52" y="207.5" ></text>
</g>
<g >
<title>time.Now (1 samples, 0.10%)</title><rect x="688.5" y="229" width="1.1" height="15.0" fill="rgb(210,26,32)" rx="2" ry="2" />
<text  x="691.50" y="239.5" ></text>
</g>
<g >
<title>net/http.Header.WriteSubset (2 samples, 0.19%)</title><rect x="174.5" y="245" width="2.3" height="15.0" fill="rgb(220,180,49)" rx="2" ry="2" />
<text  x="177.52" y="255.5" ></text>
</g>
<g >
<title>runtime.wakep (23 samples, 2.21%)</title><rect x="1123.1" y="245" width="26.1" height="15.0" fill="rgb(214,195,30)" rx="2" ry="2" />
<text  x="1126.06" y="255.5" >r..</text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.19%)</title><rect x="170.0" y="261" width="2.2" height="15.0" fill="rgb(241,149,9)" rx="2" ry="2" />
<text  x="172.98" y="271.5" ></text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/stats.IncCounter (1 samples, 0.10%)</title><rect x="457.0" y="229" width="1.2" height="15.0" fill="rgb(223,158,23)" rx="2" ry="2" />
<text  x="460.04" y="239.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.10%)</title><rect x="449.1" y="37" width="1.1" height="15.0" fill="rgb(239,73,27)" rx="2" ry="2" />
<text  x="452.10" y="47.5" ></text>
</g>
<g >
<title>runtime.(*randomOrder).start (2 samples, 0.19%)</title><rect x="737.3" y="245" width="2.3" height="15.0" fill="rgb(222,157,36)" rx="2" ry="2" />
<text  x="740.29" y="255.5" ></text>
</g>
<g >
<title>runtime.notesleep (85 samples, 8.17%)</title><rect x="763.4" y="229" width="96.4" height="15.0" fill="rgb(212,208,27)" rx="2" ry="2" />
<text  x="766.38" y="239.5" >runtime.not..</text>
</g>
<g >
<title>runtime.findfunc (1 samples, 0.10%)</title><rect x="171.1" y="197" width="1.1" height="15.0" fill="rgb(206,222,37)" rx="2" ry="2" />
<text  x="174.12" y="207.5" ></text>
</g>
<g >
<title>bytes.IndexByte (1 samples, 0.10%)</title><rect x="159.8" y="213" width="1.1" height="15.0" fill="rgb(208,74,15)" rx="2" ry="2" />
<text  x="162.77" y="223.5" ></text>
</g>
<g >
<title>net/http.(*connReader).backgroundRead (34 samples, 3.27%)</title><rect x="689.6" y="309" width="38.6" height="15.0" fill="rgb(206,111,26)" rx="2" ry="2" />
<text  x="692.63" y="319.5" >net..</text>
</g>
<g >
<title>net.(*netFD).Read (122 samples, 11.73%)</title><rect x="12.3" y="229" width="138.4" height="15.0" fill="rgb(236,157,39)" rx="2" ry="2" />
<text  x="15.27" y="239.5" >net.(*netFD).Read</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="168.8" y="261" width="1.2" height="15.0" fill="rgb(247,60,15)" rx="2" ry="2" />
<text  x="171.85" y="271.5" ></text>
</g>
<g >
<title>runtime.unlock2 (1 samples, 0.10%)</title><rect x="1169.6" y="261" width="1.1" height="15.0" fill="rgb(253,70,38)" rx="2" ry="2" />
<text  x="1172.58" y="271.5" ></text>
</g>
<g >
<title>sync/atomic.StorePointer (1 samples, 0.10%)</title><rect x="1188.9" y="293" width="1.1" height="15.0" fill="rgb(219,37,14)" rx="2" ry="2" />
<text  x="1191.87" y="303.5" ></text>
</g>
<g >
<title>runtime.injectglist.func1 (18 samples, 1.73%)</title><rect x="741.8" y="229" width="20.4" height="15.0" fill="rgb(224,119,24)" rx="2" ry="2" />
<text  x="744.83" y="239.5" ></text>
</g>
<g >
<title>net/http.(*ServeMux).ServeHTTP (325 samples, 31.25%)</title><rect x="320.9" y="277" width="368.7" height="15.0" fill="rgb(252,219,27)" rx="2" ry="2" />
<text  x="323.88" y="287.5" >net/http.(*ServeMux).ServeHTTP</text>
</g>
<g >
<title>runtime.gcstopm (1 samples, 0.10%)</title><rect x="1149.2" y="213" width="1.1" height="15.0" fill="rgb(205,76,9)" rx="2" ry="2" />
<text  x="1152.15" y="223.5" ></text>
</g>
<g >
<title>context.(*cancelCtx).cancel (1 samples, 0.10%)</title><rect x="150.7" y="277" width="1.1" height="15.0" fill="rgb(212,196,54)" rx="2" ry="2" />
<text  x="153.69" y="287.5" ></text>
</g>
<g >
<title>syscall.read (121 samples, 11.63%)</title><rect x="13.4" y="197" width="137.3" height="15.0" fill="rgb(207,10,6)" rx="2" ry="2" />
<text  x="16.40" y="207.5" >syscall.read</text>
</g>
<g >
<title>runtime.resetspinning (24 samples, 2.31%)</title><rect x="1121.9" y="261" width="27.3" height="15.0" fill="rgb(213,33,30)" rx="2" ry="2" />
<text  x="1124.92" y="271.5" >r..</text>
</g>
<g >
<title>net/http.HandlerFunc.ServeHTTP (325 samples, 31.25%)</title><rect x="320.9" y="261" width="368.7" height="15.0" fill="rgb(247,103,30)" rx="2" ry="2" />
<text  x="323.88" y="271.5" >net/http.HandlerFunc.ServeHTTP</text>
</g>
<g >
<title>runtime.semrelease (1 samples, 0.10%)</title><rect x="328.8" y="133" width="1.2" height="15.0" fill="rgb(223,44,5)" rx="2" ry="2" />
<text  x="331.83" y="143.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.19%)</title><rect x="1151.4" y="245" width="2.3" height="15.0" fill="rgb(249,177,50)" rx="2" ry="2" />
<text  x="1154.42" y="255.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.10%)</title><rect x="1161.6" y="293" width="1.2" height="15.0" fill="rgb(246,125,6)" rx="2" ry="2" />
<text  x="1164.63" y="303.5" ></text>
</g>
<g >
<title>syscall.syscall (107 samples, 10.29%)</title><rect x="330.0" y="149" width="121.4" height="15.0" fill="rgb(237,222,45)" rx="2" ry="2" />
<text  x="332.96" y="159.5" >syscall.syscall</text>
</g>
<g >
<title>runtime.unlockWithRank (1 samples, 0.10%)</title><rect x="1169.6" y="277" width="1.1" height="15.0" fill="rgb(243,29,39)" rx="2" ry="2" />
<text  x="1172.58" y="287.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.10%)</title><rect x="157.5" y="197" width="1.1" height="15.0" fill="rgb(216,111,36)" rx="2" ry="2" />
<text  x="160.50" y="207.5" ></text>
</g>
<g >
<title>runtime.newproc (2 samples, 0.19%)</title><rect x="170.0" y="277" width="2.2" height="15.0" fill="rgb(232,9,32)" rx="2" ry="2" />
<text  x="172.98" y="287.5" ></text>
</g>
<g >
<title>syscall.Write (107 samples, 10.29%)</title><rect x="330.0" y="181" width="121.4" height="15.0" fill="rgb(206,155,44)" rx="2" ry="2" />
<text  x="332.96" y="191.5" >syscall.Write</text>
</g>
<g >
<title>sync/atomic.(*Pointer[...]).Store (1 samples, 0.10%)</title><rect x="1188.9" y="309" width="1.1" height="15.0" fill="rgb(241,207,54)" rx="2" ry="2" />
<text  x="1191.87" y="319.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.10%)</title><rect x="1121.9" y="245" width="1.2" height="15.0" fill="rgb(245,26,44)" rx="2" ry="2" />
<text  x="1124.92" y="255.5" ></text>
</g>
<g >
<title>runtime.madvise (1 samples, 0.10%)</title><rect x="1161.6" y="149" width="1.2" height="15.0" fill="rgb(247,175,12)" rx="2" ry="2" />
<text  x="1164.63" y="159.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.10%)</title><rect x="1148.0" y="181" width="1.2" height="15.0" fill="rgb(254,105,1)" rx="2" ry="2" />
<text  x="1151.02" y="191.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.10%)</title><rect x="1117.4" y="213" width="1.1" height="15.0" fill="rgb(206,97,45)" rx="2" ry="2" />
<text  x="1120.38" y="223.5" ></text>
</g>
<g >
<title>net/http.(*conn).setState (1 samples, 0.10%)</title><rect x="167.7" y="293" width="1.1" height="15.0" fill="rgb(230,150,21)" rx="2" ry="2" />
<text  x="170.71" y="303.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (1 samples, 0.10%)</title><rect x="454.8" y="149" width="1.1" height="15.0" fill="rgb(246,182,28)" rx="2" ry="2" />
<text  x="457.77" y="159.5" ></text>
</g>
<g >
<title>net.(*conn).Read (122 samples, 11.73%)</title><rect x="12.3" y="245" width="138.4" height="15.0" fill="rgb(234,146,0)" rx="2" ry="2" />
<text  x="15.27" y="255.5" >net.(*conn).Read</text>
</g>
<g >
<title>fmt.(*pp).handleMethods (1 samples, 0.10%)</title><rect x="324.3" y="165" width="1.1" height="15.0" fill="rgb(214,202,1)" rx="2" ry="2" />
<text  x="327.29" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (6 samples, 0.58%)</title><rect x="1162.8" y="261" width="6.8" height="15.0" fill="rgb(242,100,51)" rx="2" ry="2" />
<text  x="1165.77" y="271.5" ></text>
</g>
<g >
<title>runtime.bgscavenge (1 samples, 0.10%)</title><rect x="728.2" y="309" width="1.1" height="15.0" fill="rgb(208,144,22)" rx="2" ry="2" />
<text  x="731.21" y="319.5" ></text>
</g>
<g >
<title>runtime.writeHeapBits.flush (1 samples, 0.10%)</title><rect x="727.1" y="229" width="1.1" height="15.0" fill="rgb(208,37,15)" rx="2" ry="2" />
<text  x="730.08" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.10%)</title><rect x="1161.6" y="261" width="1.2" height="15.0" fill="rgb(233,229,43)" rx="2" ry="2" />
<text  x="1164.63" y="271.5" ></text>
</g>
<g >
<title>runtime.stealWork (49 samples, 4.71%)</title><rect x="1061.8" y="245" width="55.6" height="15.0" fill="rgb(216,168,43)" rx="2" ry="2" />
<text  x="1064.79" y="255.5" >runti..</text>
</g>
<g >
<title>context.withCancel (1 samples, 0.10%)</title><rect x="151.8" y="261" width="1.2" height="15.0" fill="rgb(212,41,53)" rx="2" ry="2" />
<text  x="154.83" y="271.5" ></text>
</g>
<g >
<title>runtime.semawakeup (10 samples, 0.96%)</title><rect x="1177.5" y="229" width="11.4" height="15.0" fill="rgb(248,215,5)" rx="2" ry="2" />
<text  x="1180.52" y="239.5" ></text>
</g>
<g >
<title>runtime.park_m (363 samples, 34.90%)</title><rect x="737.3" y="293" width="411.9" height="15.0" fill="rgb(248,140,1)" rx="2" ry="2" />
<text  x="740.29" y="303.5" >runtime.park_m</text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.10%)</title><rect x="1149.2" y="165" width="1.1" height="15.0" fill="rgb(228,69,15)" rx="2" ry="2" />
<text  x="1152.15" y="175.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.10%)</title><rect x="168.8" y="245" width="1.2" height="15.0" fill="rgb(217,185,47)" rx="2" ry="2" />
<text  x="171.85" y="255.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.19%)</title><rect x="1118.5" y="229" width="2.3" height="15.0" fill="rgb(234,129,23)" rx="2" ry="2" />
<text  x="1121.52" y="239.5" ></text>
</g>
<g >
<title>syscall.syscall6 (159 samples, 15.29%)</title><rect x="460.4" y="149" width="180.4" height="15.0" fill="rgb(231,192,14)" rx="2" ry="2" />
<text  x="463.44" y="159.5" >syscall.syscall6</text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (6 samples, 0.58%)</title><rect x="1162.8" y="293" width="6.8" height="15.0" fill="rgb(253,200,33)" rx="2" ry="2" />
<text  x="1165.77" y="303.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.10%)</title><rect x="762.2" y="229" width="1.2" height="15.0" fill="rgb(221,21,52)" rx="2" ry="2" />
<text  x="765.25" y="239.5" ></text>
</g>
<g >
<title>runtime.getitab (1 samples, 0.10%)</title><rect x="175.7" y="197" width="1.1" height="15.0" fill="rgb(234,77,25)" rx="2" ry="2" />
<text  x="178.65" y="207.5" ></text>
</g>
<g >
<title>runtime.kevent (1 samples, 0.10%)</title><rect x="736.2" y="229" width="1.1" height="15.0" fill="rgb(221,60,27)" rx="2" ry="2" />
<text  x="739.15" y="239.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.10%)</title><rect x="739.6" y="245" width="1.1" height="15.0" fill="rgb(248,74,33)" rx="2" ry="2" />
<text  x="742.56" y="255.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.10%)</title><rect x="454.8" y="165" width="1.1" height="15.0" fill="rgb(251,89,26)" rx="2" ry="2" />
<text  x="457.77" y="175.5" ></text>
</g>
<g >
<title>runtime.signalM (6 samples, 0.58%)</title><rect x="1162.8" y="213" width="6.8" height="15.0" fill="rgb(210,6,14)" rx="2" ry="2" />
<text  x="1165.77" y="223.5" ></text>
</g>
<g >
<title>syscall.Sysctl (201 samples, 19.33%)</title><rect x="460.4" y="197" width="228.1" height="15.0" fill="rgb(253,69,27)" rx="2" ry="2" />
<text  x="463.44" y="207.5" >syscall.Sysctl</text>
</g>
<g >
<title>time.Now (1 samples, 0.10%)</title><rect x="173.4" y="229" width="1.1" height="15.0" fill="rgb(240,150,29)" rx="2" ry="2" />
<text  x="176.38" y="239.5" ></text>
</g>
<g >
<title>runtime.wakeNetPoller (1 samples, 0.10%)</title><rect x="728.2" y="261" width="1.1" height="15.0" fill="rgb(248,226,5)" rx="2" ry="2" />
<text  x="731.21" y="271.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.10%)</title><rect x="1161.6" y="277" width="1.2" height="15.0" fill="rgb(235,17,50)" rx="2" ry="2" />
<text  x="1164.63" y="287.5" ></text>
</g>
<g >
<title>runtime.lock2 (1 samples, 0.10%)</title><rect x="448.0" y="69" width="1.1" height="15.0" fill="rgb(225,16,51)" rx="2" ry="2" />
<text  x="450.96" y="79.5" ></text>
</g>
<g >
<title>runtime.schedule (2 samples, 0.19%)</title><rect x="1149.2" y="245" width="2.2" height="15.0" fill="rgb(235,8,46)" rx="2" ry="2" />
<text  x="1152.15" y="255.5" ></text>
</g>
<g >
<title>runtime.startm (22 samples, 2.12%)</title><rect x="1123.1" y="229" width="24.9" height="15.0" fill="rgb(253,130,12)" rx="2" ry="2" />
<text  x="1126.06" y="239.5" >r..</text>
</g>
<g >
<title>net/textproto.(*Reader).readLineSlice (1 samples, 0.10%)</title><rect x="158.6" y="261" width="1.2" height="15.0" fill="rgb(214,57,14)" rx="2" ry="2" />
<text  x="161.63" y="271.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (2 samples, 0.19%)</title><rect x="1118.5" y="261" width="2.3" height="15.0" fill="rgb(226,166,19)" rx="2" ry="2" />
<text  x="1121.52" y="271.5" ></text>
</g>
<g >
<title>os.(*File).write (111 samples, 10.67%)</title><rect x="325.4" y="197" width="126.0" height="15.0" fill="rgb(216,55,26)" rx="2" ry="2" />
<text  x="328.42" y="207.5" >os.(*File).write</text>
</g>
<g >
<title>runtime.mPark (1 samples, 0.10%)</title><rect x="740.7" y="229" width="1.1" height="15.0" fill="rgb(236,192,46)" rx="2" ry="2" />
<text  x="743.69" y="239.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (6 samples, 0.58%)</title><rect x="729.3" y="309" width="6.9" height="15.0" fill="rgb(230,215,11)" rx="2" ry="2" />
<text  x="732.35" y="319.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="157.5" y="213" width="1.1" height="15.0" fill="rgb(236,142,3)" rx="2" ry="2" />
<text  x="160.50" y="223.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint8).Load (1 samples, 0.10%)</title><rect x="639.7" y="117" width="1.1" height="15.0" fill="rgb(218,55,10)" rx="2" ry="2" />
<text  x="642.71" y="127.5" ></text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/handlers.parseUserAgent (2 samples, 0.19%)</title><rect x="452.5" y="213" width="2.3" height="15.0" fill="rgb(250,62,41)" rx="2" ry="2" />
<text  x="455.50" y="223.5" ></text>
</g>
<g >
<title>runtime.semawakeup (4 samples, 0.38%)</title><rect x="1170.7" y="213" width="4.5" height="15.0" fill="rgb(231,158,19)" rx="2" ry="2" />
<text  x="1173.71" y="223.5" ></text>
</g>
<g >
<title>internal/poll.setDeadlineImpl (1 samples, 0.10%)</title><rect x="154.1" y="261" width="1.1" height="15.0" fill="rgb(241,198,30)" rx="2" ry="2" />
<text  x="157.10" y="271.5" ></text>
</g>
<g >
<title>runtime.startm (18 samples, 1.73%)</title><rect x="741.8" y="213" width="20.4" height="15.0" fill="rgb(240,96,13)" rx="2" ry="2" />
<text  x="744.83" y="223.5" ></text>
</g>
<g >
<title>runtime.newproc.func1 (2 samples, 0.19%)</title><rect x="170.0" y="245" width="2.2" height="15.0" fill="rgb(228,78,45)" rx="2" ry="2" />
<text  x="172.98" y="255.5" ></text>
</g>
<g >
<title>runtime.madvise (3 samples, 0.29%)</title><rect x="1158.2" y="261" width="3.4" height="15.0" fill="rgb(229,196,9)" rx="2" ry="2" />
<text  x="1161.23" y="271.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.10%)</title><rect x="1150.3" y="197" width="1.1" height="15.0" fill="rgb(225,82,42)" rx="2" ry="2" />
<text  x="1153.29" y="207.5" ></text>
</g>
<g >
<title>runtime.mapassign_faststr (1 samples, 0.10%)</title><rect x="163.2" y="245" width="1.1" height="15.0" fill="rgb(219,151,21)" rx="2" ry="2" />
<text  x="166.17" y="255.5" ></text>
</g>
<g >
<title>runtime.newproc1 (2 samples, 0.19%)</title><rect x="170.0" y="229" width="2.2" height="15.0" fill="rgb(215,119,33)" rx="2" ry="2" />
<text  x="172.98" y="239.5" ></text>
</g>
<g >
<title>runtime.wakep (10 samples, 0.96%)</title><rect x="1177.5" y="277" width="11.4" height="15.0" fill="rgb(233,51,42)" rx="2" ry="2" />
<text  x="1180.52" y="287.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.10%)</title><rect x="727.1" y="277" width="1.1" height="15.0" fill="rgb(224,162,3)" rx="2" ry="2" />
<text  x="730.08" y="287.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.10%)</title><rect x="450.2" y="53" width="1.2" height="15.0" fill="rgb(233,121,11)" rx="2" ry="2" />
<text  x="453.23" y="63.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.10%)</title><rect x="729.3" y="245" width="1.2" height="15.0" fill="rgb(237,83,38)" rx="2" ry="2" />
<text  x="732.35" y="255.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Flush (130 samples, 12.50%)</title><rect x="172.2" y="277" width="147.6" height="15.0" fill="rgb(205,26,42)" rx="2" ry="2" />
<text  x="175.25" y="287.5" >bufio.(*Writer).Fl..</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.10%)</title><rect x="454.8" y="181" width="1.1" height="15.0" fill="rgb(206,45,31)" rx="2" ry="2" />
<text  x="457.77" y="191.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.10%)</title><rect x="157.5" y="229" width="1.1" height="15.0" fill="rgb(251,80,3)" rx="2" ry="2" />
<text  x="160.50" y="239.5" ></text>
</g>
<g >
<title>runtime.(*semaRoot).dequeue (1 samples, 0.10%)</title><rect x="328.8" y="101" width="1.2" height="15.0" fill="rgb(232,139,38)" rx="2" ry="2" />
<text  x="331.83" y="111.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.10%)</title><rect x="1149.2" y="149" width="1.1" height="15.0" fill="rgb(253,73,54)" rx="2" ry="2" />
<text  x="1152.15" y="159.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_faststr (1 samples, 0.10%)</title><rect x="160.9" y="229" width="1.1" height="15.0" fill="rgb(209,112,39)" rx="2" ry="2" />
<text  x="163.90" y="239.5" ></text>
</g>
<g >
<title>runtime.mapdelete_faststr (1 samples, 0.10%)</title><rect x="156.4" y="229" width="1.1" height="15.0" fill="rgb(206,195,9)" rx="2" ry="2" />
<text  x="159.37" y="239.5" ></text>
</g>
<g >
<title>runtime.entersyscall (4 samples, 0.38%)</title><rect x="446.8" y="133" width="4.6" height="15.0" fill="rgb(241,13,24)" rx="2" ry="2" />
<text  x="449.83" y="143.5" ></text>
</g>
<g >
<title>runtime.entersyscall (1 samples, 0.10%)</title><rect x="639.7" y="133" width="1.1" height="15.0" fill="rgb(207,196,48)" rx="2" ry="2" />
<text  x="642.71" y="143.5" ></text>
</g>
<g >
<title>net/http.Header.sortedKeyValues (1 samples, 0.10%)</title><rect x="174.5" y="213" width="1.2" height="15.0" fill="rgb(243,144,19)" rx="2" ry="2" />
<text  x="177.52" y="223.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.10%)</title><rect x="1121.9" y="229" width="1.2" height="15.0" fill="rgb(248,134,20)" rx="2" ry="2" />
<text  x="1124.92" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_kill (6 samples, 0.58%)</title><rect x="1162.8" y="197" width="6.8" height="15.0" fill="rgb(233,183,34)" rx="2" ry="2" />
<text  x="1165.77" y="207.5" ></text>
</g>
<g >
<title>net/http.checkConnErrorWriter.Write (126 samples, 12.12%)</title><rect x="176.8" y="261" width="143.0" height="15.0" fill="rgb(212,108,3)" rx="2" ry="2" />
<text  x="179.79" y="271.5" >net/http.checkConn..</text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.10%)</title><rect x="170.0" y="213" width="1.1" height="15.0" fill="rgb(243,1,0)" rx="2" ry="2" />
<text  x="172.98" y="223.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.10%)</title><rect x="729.3" y="229" width="1.2" height="15.0" fill="rgb(228,17,16)" rx="2" ry="2" />
<text  x="732.35" y="239.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.10%)</title><rect x="454.8" y="197" width="1.1" height="15.0" fill="rgb(246,81,53)" rx="2" ry="2" />
<text  x="457.77" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (21 samples, 2.02%)</title><rect x="1123.1" y="181" width="23.8" height="15.0" fill="rgb(229,173,26)" rx="2" ry="2" />
<text  x="1126.06" y="191.5" >r..</text>
</g>
<g >
<title>time.now (1 samples, 0.10%)</title><rect x="688.5" y="213" width="1.1" height="15.0" fill="rgb(242,124,21)" rx="2" ry="2" />
<text  x="691.50" y="223.5" ></text>
</g>
<g >
<title>runtime.injectglist (18 samples, 1.73%)</title><rect x="741.8" y="245" width="20.4" height="15.0" fill="rgb(245,127,3)" rx="2" ry="2" />
<text  x="744.83" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.10%)</title><rect x="1169.6" y="245" width="1.1" height="15.0" fill="rgb(238,106,49)" rx="2" ry="2" />
<text  x="1172.58" y="255.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (2 samples, 0.19%)</title><rect x="449.1" y="85" width="2.3" height="15.0" fill="rgb(240,128,46)" rx="2" ry="2" />
<text  x="452.10" y="95.5" ></text>
</g>
<g >
<title>runtime.systemstack (6 samples, 0.58%)</title><rect x="729.3" y="293" width="6.9" height="15.0" fill="rgb(237,219,5)" rx="2" ry="2" />
<text  x="732.35" y="303.5" ></text>
</g>
<g >
<title>runtime.gcDrain (6 samples, 0.58%)</title><rect x="729.3" y="261" width="6.9" height="15.0" fill="rgb(212,45,42)" rx="2" ry="2" />
<text  x="732.35" y="271.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (1 samples, 0.10%)</title><rect x="1061.8" y="213" width="1.1" height="15.0" fill="rgb(235,182,25)" rx="2" ry="2" />
<text  x="1064.79" y="223.5" ></text>
</g>
<g >
<title>runtime.modtimer (1 samples, 0.10%)</title><rect x="728.2" y="277" width="1.1" height="15.0" fill="rgb(250,219,47)" rx="2" ry="2" />
<text  x="731.21" y="287.5" ></text>
</g>
<g >
<title>net/http.newBufioWriterSize (1 samples, 0.10%)</title><rect x="155.2" y="277" width="1.2" height="15.0" fill="rgb(213,34,11)" rx="2" ry="2" />
<text  x="158.23" y="287.5" ></text>
</g>
<g >
<title>time.Duration.String (1 samples, 0.10%)</title><rect x="324.3" y="149" width="1.1" height="15.0" fill="rgb(208,164,22)" rx="2" ry="2" />
<text  x="327.29" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (4 samples, 0.38%)</title><rect x="1153.7" y="293" width="4.5" height="15.0" fill="rgb(212,54,25)" rx="2" ry="2" />
<text  x="1156.69" y="303.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (1 samples, 0.10%)</title><rect x="12.3" y="213" width="1.1" height="15.0" fill="rgb(234,216,35)" rx="2" ry="2" />
<text  x="15.27" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrain (6 samples, 0.58%)</title><rect x="1162.8" y="277" width="6.8" height="15.0" fill="rgb(226,161,26)" rx="2" ry="2" />
<text  x="1165.77" y="287.5" ></text>
</g>
<g >
<title>net/textproto.(*Reader).ReadLine (1 samples, 0.10%)</title><rect x="158.6" y="277" width="1.2" height="15.0" fill="rgb(250,113,3)" rx="2" ry="2" />
<text  x="161.63" y="287.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.10%)</title><rect x="1150.3" y="181" width="1.1" height="15.0" fill="rgb(213,219,19)" rx="2" ry="2" />
<text  x="1153.29" y="191.5" ></text>
</g>
<g >
<title>runtime.heapBitsSetType (1 samples, 0.10%)</title><rect x="727.1" y="245" width="1.1" height="15.0" fill="rgb(221,42,26)" rx="2" ry="2" />
<text  x="730.08" y="255.5" ></text>
</g>
<g >
<title>runtime.(*stackScanState).getPtr (1 samples, 0.10%)</title><rect x="729.3" y="197" width="1.2" height="15.0" fill="rgb(218,117,54)" rx="2" ry="2" />
<text  x="732.35" y="207.5" ></text>
</g>
<g >
<title>runtime.semasleep (85 samples, 8.17%)</title><rect x="763.4" y="213" width="96.4" height="15.0" fill="rgb(248,119,28)" rx="2" ry="2" />
<text  x="766.38" y="223.5" >runtime.sem..</text>
</g>
<g >
<title>bytes.Cut (1 samples, 0.10%)</title><rect x="159.8" y="229" width="1.1" height="15.0" fill="rgb(214,178,10)" rx="2" ry="2" />
<text  x="162.77" y="239.5" ></text>
</g>
<g >
<title>runtime.heapBits.next (1 samples, 0.10%)</title><rect x="732.8" y="229" width="1.1" height="15.0" fill="rgb(238,122,40)" rx="2" ry="2" />
<text  x="735.75" y="239.5" ></text>
</g>
<g >
<title>runtime.newobject (1 samples, 0.10%)</title><rect x="165.4" y="261" width="1.2" height="15.0" fill="rgb(239,12,33)" rx="2" ry="2" />
<text  x="168.44" y="271.5" ></text>
</g>
<g >
<title>syscall.write (126 samples, 12.12%)</title><rect x="176.8" y="197" width="143.0" height="15.0" fill="rgb(228,16,51)" rx="2" ry="2" />
<text  x="179.79" y="207.5" >syscall.write</text>
</g>
<g >
<title>runtime.findRunnable (1 samples, 0.10%)</title><rect x="736.2" y="261" width="1.1" height="15.0" fill="rgb(240,206,4)" rx="2" ry="2" />
<text  x="739.15" y="271.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Peek (124 samples, 11.92%)</title><rect x="10.0" y="293" width="140.7" height="15.0" fill="rgb(205,8,47)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >bufio.(*Reader).P..</text>
</g>
<g >
<title>net/http.(*conn).serve (599 samples, 57.60%)</title><rect x="10.0" y="309" width="679.6" height="15.0" fill="rgb(216,175,29)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >net/http.(*conn).serve</text>
</g>
<g >
<title>net/http.readTransfer (1 samples, 0.10%)</title><rect x="156.4" y="261" width="1.1" height="15.0" fill="rgb(239,193,36)" rx="2" ry="2" />
<text  x="159.37" y="271.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.10%)</title><rect x="1148.0" y="197" width="1.2" height="15.0" fill="rgb(234,101,25)" rx="2" ry="2" />
<text  x="1151.02" y="207.5" ></text>
</g>
<g >
<title>runtime.unlock2 (1 samples, 0.10%)</title><rect x="1148.0" y="213" width="1.2" height="15.0" fill="rgb(208,22,23)" rx="2" ry="2" />
<text  x="1151.02" y="223.5" ></text>
</g>
<g >
<title>net/http.Header.writeSubset (2 samples, 0.19%)</title><rect x="174.5" y="229" width="2.3" height="15.0" fill="rgb(235,152,48)" rx="2" ry="2" />
<text  x="177.52" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (18 samples, 1.73%)</title><rect x="741.8" y="165" width="20.4" height="15.0" fill="rgb(210,226,14)" rx="2" ry="2" />
<text  x="744.83" y="175.5" ></text>
</g>
<g >
<title>runtime.resettimer (1 samples, 0.10%)</title><rect x="728.2" y="293" width="1.1" height="15.0" fill="rgb(221,64,45)" rx="2" ry="2" />
<text  x="731.21" y="303.5" ></text>
</g>
<g >
<title>sync.(*Pool).Get (1 samples, 0.10%)</title><rect x="155.2" y="261" width="1.2" height="15.0" fill="rgb(237,149,25)" rx="2" ry="2" />
<text  x="158.23" y="271.5" ></text>
</g>
<g >
<title>bufio.(*Reader).fill (124 samples, 11.92%)</title><rect x="10.0" y="277" width="140.7" height="15.0" fill="rgb(217,186,2)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >bufio.(*Reader).f..</text>
</g>
<g >
<title>runtime.reentersyscall (4 samples, 0.38%)</title><rect x="446.8" y="117" width="4.6" height="15.0" fill="rgb(233,130,47)" rx="2" ry="2" />
<text  x="449.83" y="127.5" ></text>
</g>
<g >
<title>runtime.mapiterinit (1 samples, 0.10%)</title><rect x="166.6" y="277" width="1.1" height="15.0" fill="rgb(239,26,11)" rx="2" ry="2" />
<text  x="169.58" y="287.5" ></text>
</g>
<g >
<title>runtime.madvise (4 samples, 0.38%)</title><rect x="1153.7" y="261" width="4.5" height="15.0" fill="rgb(225,15,17)" rx="2" ry="2" />
<text  x="1156.69" y="271.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.10%)</title><rect x="448.0" y="85" width="1.1" height="15.0" fill="rgb(225,59,32)" rx="2" ry="2" />
<text  x="450.96" y="95.5" ></text>
</g>
<g >
<title>net/textproto.validHeaderFieldByte (1 samples, 0.10%)</title><rect x="162.0" y="245" width="1.2" height="15.0" fill="rgb(250,4,16)" rx="2" ry="2" />
<text  x="165.04" y="255.5" ></text>
</g>
<g >
<title>runtime.preemptone (6 samples, 0.58%)</title><rect x="1162.8" y="229" width="6.8" height="15.0" fill="rgb(211,207,16)" rx="2" ry="2" />
<text  x="1165.77" y="239.5" ></text>
</g>
<g >
<title>net.(*conn).Read (33 samples, 3.17%)</title><rect x="690.8" y="293" width="37.4" height="15.0" fill="rgb(247,9,40)" rx="2" ry="2" />
<text  x="693.77" y="303.5" >net..</text>
</g>
<g >
<title>runtime.pageIndexOf (2 samples, 0.19%)</title><rect x="733.9" y="229" width="2.3" height="15.0" fill="rgb(241,49,12)" rx="2" ry="2" />
<text  x="736.88" y="239.5" ></text>
</g>
<g >
<title>github.com/vivekprm/go-pprof-demo/handlers.Hello (1 samples, 0.10%)</title><rect x="451.4" y="229" width="1.1" height="15.0" fill="rgb(224,112,47)" rx="2" ry="2" />
<text  x="454.37" y="239.5" ></text>
</g>
<g >
<title>runtime.sysUsedOS (4 samples, 0.38%)</title><rect x="1153.7" y="277" width="4.5" height="15.0" fill="rgb(218,211,24)" rx="2" ry="2" />
<text  x="1156.69" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (85 samples, 8.17%)</title><rect x="763.4" y="197" width="96.4" height="15.0" fill="rgb(235,209,10)" rx="2" ry="2" />
<text  x="766.38" y="207.5" >runtime.pth..</text>
</g>
<g >
<title>runtime.(*mheap).allocManual (1 samples, 0.10%)</title><rect x="1161.6" y="181" width="1.2" height="15.0" fill="rgb(253,102,50)" rx="2" ry="2" />
<text  x="1164.63" y="191.5" ></text>
</g>
<g >
<title>runtime.isSystemGoroutine (1 samples, 0.10%)</title><rect x="171.1" y="213" width="1.1" height="15.0" fill="rgb(236,186,18)" rx="2" ry="2" />
<text  x="174.12" y="223.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.10%)</title><rect x="736.2" y="277" width="1.1" height="15.0" fill="rgb(208,138,3)" rx="2" ry="2" />
<text  x="739.15" y="287.5" ></text>
</g>
<g >
<title>net/http.(*chunkWriter).Write (4 samples, 0.38%)</title><rect x="172.2" y="261" width="4.6" height="15.0" fill="rgb(216,45,54)" rx="2" ry="2" />
<text  x="175.25" y="271.5" ></text>
</g>
<g >
<title>runtime.osyield (2 samples, 0.19%)</title><rect x="1175.2" y="277" width="2.3" height="15.0" fill="rgb(216,12,19)" rx="2" ry="2" />
<text  x="1178.25" y="287.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (3 samples, 0.29%)</title><rect x="1158.2" y="293" width="3.4" height="15.0" fill="rgb(217,31,32)" rx="2" ry="2" />
<text  x="1161.23" y="303.5" ></text>
</g>
<g >
<title>net/http.readRequest (2 samples, 0.19%)</title><rect x="156.4" y="277" width="2.2" height="15.0" fill="rgb(210,163,11)" rx="2" ry="2" />
<text  x="159.37" y="287.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.10%)</title><rect x="1121.9" y="213" width="1.2" height="15.0" fill="rgb(220,170,10)" rx="2" ry="2" />
<text  x="1124.92" y="223.5" ></text>
</g>
<g >
<title>runtime.wirep (1 samples, 0.10%)</title><rect x="739.6" y="229" width="1.1" height="15.0" fill="rgb(222,208,21)" rx="2" ry="2" />
<text  x="742.56" y="239.5" ></text>
</g>
<g >
<title>runtime.write1 (1 samples, 0.10%)</title><rect x="728.2" y="213" width="1.1" height="15.0" fill="rgb(215,85,32)" rx="2" ry="2" />
<text  x="731.21" y="223.5" ></text>
</g>
<g >
<title>syscall.syscall6 (42 samples, 4.04%)</title><rect x="640.8" y="165" width="47.7" height="15.0" fill="rgb(246,115,16)" rx="2" ry="2" />
<text  x="643.85" y="175.5" >sysc..</text>
</g>
<g >
<title>net/textproto.MIMEHeader.Del (1 samples, 0.10%)</title><rect x="156.4" y="245" width="1.1" height="15.0" fill="rgb(243,135,9)" rx="2" ry="2" />
<text  x="159.37" y="255.5" ></text>
</g>
<g >
<title>runtime.mPark (1 samples, 0.10%)</title><rect x="1149.2" y="197" width="1.1" height="15.0" fill="rgb(236,13,39)" rx="2" ry="2" />
<text  x="1152.15" y="207.5" ></text>
</g>
<g >
<title>net/url.parse (1 samples, 0.10%)</title><rect x="157.5" y="245" width="1.1" height="15.0" fill="rgb(223,210,54)" rx="2" ry="2" />
<text  x="160.50" y="255.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.10%)</title><rect x="1117.4" y="197" width="1.1" height="15.0" fill="rgb(235,97,53)" rx="2" ry="2" />
<text  x="1120.38" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (4 samples, 0.38%)</title><rect x="1170.7" y="197" width="4.5" height="15.0" fill="rgb(207,69,26)" rx="2" ry="2" />
<text  x="1173.71" y="207.5" ></text>
</g>
<g >
<title>runtime.usleep (2 samples, 0.19%)</title><rect x="1151.4" y="229" width="2.3" height="15.0" fill="rgb(250,128,16)" rx="2" ry="2" />
<text  x="1154.42" y="239.5" ></text>
</g>
<g >
<title>context.WithCancel.func1 (1 samples, 0.10%)</title><rect x="150.7" y="293" width="1.1" height="15.0" fill="rgb(214,174,32)" rx="2" ry="2" />
<text  x="153.69" y="303.5" ></text>
</g>
<g >
<title>runtime.netpoll (178 samples, 17.12%)</title><rect x="859.8" y="245" width="202.0" height="15.0" fill="rgb(224,151,9)" rx="2" ry="2" />
<text  x="862.83" y="255.5" >runtime.netpoll</text>
</g>
<g >
<title>runtime.pthread_cond_signal (10 samples, 0.96%)</title><rect x="1177.5" y="213" width="11.4" height="15.0" fill="rgb(211,118,11)" rx="2" ry="2" />
<text  x="1180.52" y="223.5" ></text>
</g>
<g >
<title>runtime.mapassign_faststr (1 samples, 0.10%)</title><rect x="455.9" y="213" width="1.1" height="15.0" fill="rgb(247,165,16)" rx="2" ry="2" />
<text  x="458.90" y="223.5" ></text>
</g>
</g>
</svg>
